package smolyanVote.smolyanVote.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import smolyanVote.smolyanVote.config.websocket.ActivityWebSocketHandler;
import smolyanVote.smolyanVote.services.interfaces.ActivityLogService;

/**
 * Scheduled tasks –∑–∞ Activity Wall —Å–∏—Å—Ç–µ–º–∞
 * –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ –∏–∑–ø—Ä–∞—â–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø–æ–¥–¥—ä—Ä–∂–∞ WebSocket –≤—Ä—ä–∑–∫–∏—Ç–µ
 */
@Component
public class ActivityStatsScheduler {

    private final ActivityLogService activityLogService;
    private final ActivityWebSocketHandler activityWebSocketHandler;

    @Autowired
    public ActivityStatsScheduler(ActivityLogService activityLogService,
                                  ActivityWebSocketHandler activityWebSocketHandler) {
        this.activityLogService = activityLogService;
        this.activityWebSocketHandler = activityWebSocketHandler;
    }

    /**
     * –ò–∑–ø—Ä–∞—â–∞ –æ–±–Ω–æ–≤–µ–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≤—Å–µ–∫–∏ 30 —Å–µ–∫—É–Ω–¥–∏
     * –°–∞–º–æ –∞–∫–æ –∏–º–∞ —Å–≤—ä—Ä–∑–∞–Ω–∏ –∞–¥–º–∏–Ω–∏ (–∑–∞ –¥–∞ –Ω–µ —Å–µ –ø—Ä–∞–≤–∏ –∏–∑–ª–∏—à–Ω–∞ —Ä–∞–±–æ—Ç–∞)
     */
    @Scheduled(fixedRate = 30000) // 30 —Å–µ–∫—É–Ω–¥–∏
    public void broadcastStatsUpdate() {
        try {
            if (activityWebSocketHandler.getActiveSessionsCount() > 0) {
                activityWebSocketHandler.broadcastStatsUpdate();

                // Debug log —Å–∞–º–æ –∫–æ–≥–∞—Ç–æ –∏–º–∞ —Å–≤—ä—Ä–∑–∞–Ω–∏ –∞–¥–º–∏–Ω–∏
                System.out.println("üìä Stats update sent to " +
                        activityWebSocketHandler.getActiveSessionsCount() + " admin(s)");
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error in scheduled stats update: " + e.getMessage());
        }
    }

    /**
     * –ò–∑–ø—Ä–∞—â–∞ ping –∫—ä–º –≤—Å–∏—á–∫–∏ WebSocket –≤—Ä—ä–∑–∫–∏ –Ω–∞ –≤—Å–µ–∫–∏ 60 —Å–µ–∫—É–Ω–¥–∏
     * –ó–∞ –¥–∞ —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞—Ç –≤—Ä—ä–∑–∫–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–∏
     */
    @Scheduled(fixedRate = 60000) // 60 —Å–µ–∫—É–Ω–¥–∏
    public void keepWebSocketsAlive() {
        try {
            if (activityWebSocketHandler.getActiveSessionsCount() > 0) {
                activityWebSocketHandler.broadcastSystemMessage("Heartbeat", "ping");

                System.out.println("üíì Heartbeat sent to " +
                        activityWebSocketHandler.getActiveSessionsCount() + " WebSocket connection(s)");
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error in WebSocket heartbeat: " + e.getMessage());
        }
    }

    /**
     * –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ 02:00 —á.
     * –ò–∑–ø–æ–ª–∑–≤–∞ default retention period (30 –¥–Ω–∏)
     */
    @Scheduled(cron = "0 0 2 * * *") // –í—Å–µ–∫–∏ –¥–µ–Ω –≤ 02:00
    public void dailyCleanup() {
        try {
            System.out.println("üßπ Starting daily activity logs cleanup...");

            long deletedCount = activityLogService.cleanupOldActivities(30);

            if (deletedCount > 0) {
                System.out.println("‚úÖ Daily cleanup completed: " + deletedCount + " old logs removed");
            } else {
                System.out.println("‚úÖ Daily cleanup completed: No old logs to remove");
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error in daily cleanup: " + e.getMessage());

            // –ò–∑–ø—Ä–∞—â–∞–º–µ error —Å—ä–æ–±—â–µ–Ω–∏–µ –∫—ä–º –∞–¥–º–∏–Ω–∏—Ç–µ
            try {
                activityWebSocketHandler.broadcastSystemMessage(
                        "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ—Ç–æ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ: " + e.getMessage(), "error");
            } catch (Exception broadcastError) {
                System.err.println("‚ùå Failed to broadcast cleanup error: " + broadcastError.getMessage());
            }
        }
    }

    /**
     * –°–µ–¥–º–∏—á–Ω–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–º–µ–π–ª (–±—ä–¥–µ—â–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç)
     * –í—Å—è–∫–∞ –Ω–µ–¥–µ–ª—è –≤ 08:00 —á.
     */
    @Scheduled(cron = "0 0 8 * * SUN") // –í—Å—è–∫–∞ –Ω–µ–¥–µ–ª—è –≤ 08:00
    public void weeklyStatsReport() {
        try {
            System.out.println("üìà Generating weekly activity stats report...");

            // TODO: Implement weekly email report
            // –¢–æ–≤–∞ –º–æ–∂–µ –¥–∞ —Å–µ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞ –ø–æ-–∫—ä—Å–Ω–æ —Å EmailService

            // –ó–∞—Å–µ–≥–∞ —Å–∞–º–æ –∏–∑–ø—Ä–∞—â–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ –∫—ä–º –∞–¥–º–∏–Ω–∏—Ç–µ
            activityWebSocketHandler.broadcastSystemMessage(
                    "–°–µ–¥–º–∏—á–µ–Ω –æ—Ç—á–µ—Ç: –ü–æ–≤–µ—á–µ –æ—Ç " + activityLogService.getWeekActivitiesCount() + " –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "info");

        } catch (Exception e) {
            System.err.println("‚ùå Error generating weekly report: " + e.getMessage());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç –Ω–∞ –≤—Å–µ–∫–∏ 15 –º–∏–Ω—É—Ç–∏
     */
    @Scheduled(fixedRate = 900000) // 15 –º–∏–Ω—É—Ç–∏
    public void suspiciousActivityCheck() {
        try {
            // TODO: Implement suspicious activity detection
            // –ü—Ä–∏–º–µ—Ä–∏ –∑–∞ suspicious activity:
            // - –¢–≤—ä—Ä–¥–µ –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç –µ–¥–∏–Ω IP
            // - –ù–µ–æ–±–∏—á–∞–π–Ω–∏ patterns –≤ –≥–ª–∞—Å—É–≤–∞–Ω–∏—è—Ç–∞
            // - –ú–Ω–æ–≥–æ –±—ä—Ä–∑–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ

            System.out.println("üîç Suspicious activity check completed");

        } catch (Exception e) {
            System.err.println("‚ùå Error in suspicious activity check: " + e.getMessage());
        }
    }

    /**
     * Performance –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –≤—Å–µ–∫–∏ —á–∞—Å
     */
    @Scheduled(fixedRate = 3600000) // 60 –º–∏–Ω—É—Ç–∏
    public void performanceMonitoring() {
        try {
            System.out.println("‚ö° Activity Wall performance check:");
            System.out.println("   - Active WebSocket connections: " +
                    activityWebSocketHandler.getActiveSessionsCount());
            System.out.println("   - Last hour activities: " +
                    activityLogService.getLastHourActivitiesCount());
            System.out.println("   - Estimated online users: " +
                    activityLogService.getEstimatedOnlineUsers());

            // –ê–∫–æ –∏–º–∞ —Å–≤—ä—Ä–∑–∞–Ω–∏ –∞–¥–º–∏–Ω–∏, –∏–∑–ø—Ä–∞—â–∞–º–µ performance update
            if (activityWebSocketHandler.getActiveSessionsCount() > 0) {
                activityWebSocketHandler.broadcastSystemMessage(
                        "Performance check: " + activityLogService.getLastHourActivitiesCount() +
                                " –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—è —á–∞—Å", "info");
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error in performance monitoring: " + e.getMessage());
        }
    }
}