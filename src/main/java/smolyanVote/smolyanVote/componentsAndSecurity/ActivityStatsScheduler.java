package smolyanVote.smolyanVote.componentsAndSecurity;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.ContextClosedEvent;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import smolyanVote.smolyanVote.config.websocket.ActivityWebSocketHandler;
import smolyanVote.smolyanVote.services.interfaces.ActivityLogService;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Scheduled tasks –∑–∞ Activity Wall —Å–∏—Å—Ç–µ–º–∞
 * –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ –∏–∑–ø—Ä–∞—â–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–æ–¥–¥—ä—Ä–∂–∞ WebSocket –≤—Ä—ä–∑–∫–∏—Ç–µ –∏ –ø—Ä–∞–≤–∏ cleanup
 */
@Component
public class ActivityStatsScheduler {

    private final ActivityLogService activityLogService;
    private final ActivityWebSocketHandler activityWebSocketHandler;

    private boolean systemReady = false;

    @Autowired
    public ActivityStatsScheduler(ActivityLogService activityLogService,
                                  ActivityWebSocketHandler activityWebSocketHandler) {
        this.activityLogService = activityLogService;
        this.activityWebSocketHandler = activityWebSocketHandler;
    }

    @Scheduled(cron = "0 0 2 * * ?") // –í—Å—è–∫–∞ –Ω–æ—â –≤ 2:00
    public void cleanupOldLogs() {
        activityLogService.cleanupOldActivities();
    }
    
    /**
     * –ú–∞—Ä–∫–∏—Ä–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞ –∫–∞—Ç–æ –≥–æ—Ç–æ–≤–∞ —Å–ª–µ–¥ –ø—ä–ª–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
     */
    @EventListener(ApplicationReadyEvent.class)
    public void onApplicationReady() {
        this.systemReady = true;
        System.out.println("üöÄ Admin Activity monitoring system is ready and operational");

        // –ò–∑–ø—Ä–∞—â–∞–º–µ system message –∫—ä–º –µ–≤–µ–Ω—Ç—É–∞–ª–Ω–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ –∞–¥–º–∏–Ω–∏
        if (activityWebSocketHandler.getActiveSessionsCount() > 0) {
            activityWebSocketHandler.broadcastSystemMessage(
                    "Activity monitoring system started", "info");
        }
    }

    /**
     * –ò–∑–ø—Ä–∞—â–∞ –æ–±–Ω–æ–≤–µ–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≤—Å–µ–∫–∏ 30 —Å–µ–∫—É–Ω–¥–∏
     * –°–∞–º–æ –∞–∫–æ –∏–º–∞ —Å–≤—ä—Ä–∑–∞–Ω–∏ –∞–¥–º–∏–Ω–∏ (–∑–∞ –¥–∞ –Ω–µ —Å–µ –ø—Ä–∞–≤–∏ –∏–∑–ª–∏—à–Ω–∞ —Ä–∞–±–æ—Ç–∞)
     */
    @Scheduled(fixedRate = 30000) // 30 —Å–µ–∫—É–Ω–¥–∏
    public void broadcastStatsUpdate() {
        if (!systemReady) {
            return; // –°–∏—Å—Ç–µ–º–∞—Ç–∞ –æ—â–µ –Ω–µ –µ –≥–æ—Ç–æ–≤–∞
        }

        try {
            int activeConnections = activityWebSocketHandler.getActiveSessionsCount();

            if (activeConnections > 0) {
                activityWebSocketHandler.broadcastStatsUpdate();

            }
        } catch (Exception e) {
            System.err.println("‚ùå Error in scheduled stats update: " + e.getMessage());
        }
    }

    /**
     * –ò–∑–ø—Ä–∞—â–∞ ping –∫—ä–º –≤—Å–∏—á–∫–∏ WebSocket –≤—Ä—ä–∑–∫–∏ –Ω–∞ –≤—Å–µ–∫–∏ 60 —Å–µ–∫—É–Ω–¥–∏
     * –ó–∞ –¥–∞ —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞—Ç –≤—Ä—ä–∑–∫–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–∏
     */
    @Scheduled(fixedRate = 60000) // 60 —Å–µ–∫—É–Ω–¥–∏
    public void keepWebSocketsAlive() {
        if (!systemReady) {
            return;
        }

        try {
            int activeConnections = activityWebSocketHandler.getActiveSessionsCount();

            if (activeConnections > 0) {
                activityWebSocketHandler.broadcastSystemMessage("heartbeat", "ping");

            }
        } catch (Exception e) {
            System.err.println("‚ùå Error in WebSocket heartbeat: " + e.getMessage());
        }
    }

    /**
     * –ü–æ—á–∏—Å—Ç–≤–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏ WebSocket —Å–µ—Å–∏–∏ –Ω–∞ –≤—Å–µ–∫–∏ 5 –º–∏–Ω—É—Ç–∏
     */
    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç–∏
    public void cleanupInactiveWebSocketSessions() {
        if (!systemReady) {
            return;
        }

        try {
            int beforeCount = activityWebSocketHandler.getActiveSessionsCount();
            activityWebSocketHandler.cleanupInactiveSessions();
            int afterCount = activityWebSocketHandler.getActiveSessionsCount();

            if (beforeCount != afterCount) {
                System.out.println("üßπ Cleaned up " + (beforeCount - afterCount) +
                        " inactive WebSocket sessions (" + afterCount + " remaining)");
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error cleaning up WebSocket sessions: " + e.getMessage());
        }
    }

    /**
     * –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ 02:00 —á.
     * –ò–∑—Ç—Ä–∏–≤–∞ –∑–∞–ø–∏—Å–∏ –ø–æ-—Å—Ç–∞—Ä–∏ –æ—Ç 30 –¥–Ω–∏
     */
    @Scheduled(cron = "0 0 2 * * *") // –í—Å–µ–∫–∏ –¥–µ–Ω –≤ 2:00 AM
    public void dailyActivityCleanup() {
        if (!systemReady) {
            return;
        }

        try {
            System.out.println("üßπ Starting daily activity logs cleanup at " +
                    LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));

            activityLogService.cleanupOldActivities();

            System.out.println("‚úÖ Daily activity logs cleanup completed successfully");

            // –£–≤–µ–¥–æ–º—è–≤–∞–º–µ —Å–≤—ä—Ä–∑–∞–Ω–∏—Ç–µ –∞–¥–º–∏–Ω–∏
            if (activityWebSocketHandler.getActiveSessionsCount() > 0) {
                activityWebSocketHandler.broadcastSystemMessage(
                        "Daily activity logs cleanup completed", "info");
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error in daily activity cleanup: " + e.getMessage());

            // –£–≤–µ–¥–æ–º—è–≤–∞–º–µ –∞–¥–º–∏–Ω–∏—Ç–µ –∑–∞ –≥—Ä–µ—à–∫–∞—Ç–∞
            if (activityWebSocketHandler.getActiveSessionsCount() > 0) {
                activityWebSocketHandler.broadcastSystemMessage(
                        "Error during daily cleanup: " + e.getMessage(), "error");
            }
        }
    }

    /**
     * –°–µ–¥–º–∏—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ –¥–æ–∫–ª–∞–¥–≤–∞–Ω–µ –≤ –Ω–µ–¥–µ–ª—è –≤ 03:00
     */
    @Scheduled(cron = "0 0 3 * * SUN") // –í—Å—è–∫–∞ –Ω–µ–¥–µ–ª—è –≤ 3:00 AM
    public void weeklyStatisticsReport() {
        if (!systemReady) {
            return;
        }

        try {


        } catch (Exception e) {
            System.err.println("‚ùå Error generating weekly statistics: " + e.getMessage());
        }
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ç–µ —Ä–µ—Å—É—Ä—Å–∏ –Ω–∞ –≤—Å–µ–∫–∏ 10 –º–∏–Ω—É—Ç–∏
     */
    @Scheduled(fixedRate = 600000) // 10 –º–∏–Ω—É—Ç–∏
    public void systemResourceMonitoring() {
        if (!systemReady) {
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ –Ω–µ–æ–±–∏—á–∞–π–Ω–æ –≤–∏—Å–æ–∫a –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
            var stats = activityLogService.getActivityStatistics();
            Object lastHourObj = stats.get("lastHour");
            if (lastHourObj instanceof Number) {
                long lastHourActivities = ((Number) lastHourObj).longValue();

                // –ê–∫–æ –∏–º–∞ > 500 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—è —á–∞—Å, —É–≤–µ–¥–æ–º—è–≤–∞–º–µ
                if (lastHourActivities > 500) {
                    System.out.println("‚ö†Ô∏è High activity detected: " + lastHourActivities +
                            " activities in the last hour");

                    if (activityWebSocketHandler.getActiveSessionsCount() > 0) {
                        activityWebSocketHandler.broadcastSystemMessage(
                                "High activity alert: " + lastHourActivities + " activities in last hour",
                                "warning");
                    }
                }
            }

        } catch (Exception e) {
            System.err.println("‚ùå Error in system resource monitoring: " + e.getMessage());
        }
    }

    /**
     * Emergency cleanup –ø—Ä–∏ –∏–∑–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ
     */
    @EventListener(ContextClosedEvent.class)
    public void onShutdown(ContextClosedEvent event) {
        try {
            System.out.println("üõë Activity monitoring system shutdown initiated");

            // –£–≤–µ–¥–æ–º—è–≤–∞–º–µ —Å–≤—ä—Ä–∑–∞–Ω–∏—Ç–µ –∞–¥–º–∏–Ω–∏
            if (activityWebSocketHandler.getActiveSessionsCount() > 0) {
                activityWebSocketHandler.broadcastSystemMessage(
                        "System shutdown initiated", "warning");
            }

            // –î–∞–≤–∞–º–µ –º–∞–ª–∫–æ –≤—Ä–µ–º–µ –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏—è—Ç–∞
            Thread.sleep(1000);

        } catch (Exception e) {
            System.err.println("‚ùå Error during shutdown cleanup: " + e.getMessage());
        }
    }

    // ===== UTILITY METHODS =====

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∞ –µ –≥–æ—Ç–æ–≤–∞ –∑–∞ scheduled –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    public boolean isSystemReady() {
        return systemReady;
    }

    /**
     * –†—ä—á–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ statistics broadcast (–∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ)
     */
    public void triggerStatsUpdate() {
        if (systemReady) {
            broadcastStatsUpdate();
        }
    }

    /**
     * –†—ä—á–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ cleanup (–∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ)
     */
    public void triggerCleanup() {
        if (systemReady) {
            cleanupInactiveWebSocketSessions();
        }
    }
}