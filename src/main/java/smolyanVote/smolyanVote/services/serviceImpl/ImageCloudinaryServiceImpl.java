package smolyanVote.smolyanVote.services.serviceImpl;

import com.cloudinary.Cloudinary;
import com.cloudinary.Transformation;
import com.cloudinary.utils.ObjectUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import smolyanVote.smolyanVote.services.interfaces.ImageCloudinaryService;
import smolyanVote.smolyanVote.services.interfaces.ImageModerationService;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.UUID;

@Service
public class ImageCloudinaryServiceImpl implements ImageCloudinaryService {

    private final Cloudinary cloudinary;
    private final ImageModerationService imageModerationService;

    public ImageCloudinaryServiceImpl(@Value("${cloudinary.cloud_name}") String cloudName,
                                      @Value("${cloudinary.api_key}") String apiKey,
                                      @Value("${cloudinary.api_secret}") String apiSecret,
                                      ImageModerationService imageModerationService) {
        cloudinary = new Cloudinary(ObjectUtils.asMap(
                "cloud_name", cloudName,
                "api_key", apiKey,
                "api_secret", apiSecret
        ));
        this.imageModerationService = imageModerationService;
    }

    // üåü –ú–µ—Ç–æ–¥ –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∞ —Å–Ω–∏–º–∫–∞ (–±–µ–∑ –≤–æ–¥–µ–Ω –∑–Ω–∞–∫)
    @Override
    public String saveUserImage(MultipartFile file, String username) {
        String publicId = "users/user_" + username + "/" + UUID.randomUUID();
        return uploadImage(file, publicId, "smolyanVote/users/user_" + username, false);
    }

    // üåü –ú–µ—Ç–æ–¥ –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ —Å–Ω–∏–º–∫–∞ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ (—Å –≤–æ–¥–µ–Ω –∑–Ω–∞–∫)
    @Override
    public String saveSingleImage(MultipartFile file, Long eventId) {
        String publicId = "events/event_" + eventId + "/" + UUID.randomUUID();
        return uploadImage(file, publicId, "smolyanVote/events/event_" + eventId, true);
    }

    // üåü –ú–µ—Ç–æ–¥ –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ —Å–Ω–∏–º–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω–¥—É–º (—Å –≤–æ–¥–µ–Ω –∑–Ω–∞–∫)
    @Override
    public String saveSingleReferendumImage(MultipartFile file, Long referendumId) {
        String publicId = "referendums/referendum_" + referendumId + "/" + UUID.randomUUID();
        return uploadImage(file, publicId, "smolyanVote/referendums/referendum_" + referendumId, true);
    }

    // üåü –ú–µ—Ç–æ–¥ –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ —Å–Ω–∏–º–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ (—Å –≤–æ–¥–µ–Ω –∑–Ω–∞–∫)
    @Override
    public String saveMultiPollImage(MultipartFile file, Long pollId) {
        String publicId = "multipolls/poll_" + pollId + "/" + UUID.randomUUID();
        return uploadImage(file, publicId, "smolyanVote/multipolls/poll_" + pollId, true); // —Å –≤–æ–¥–µ–Ω –∑–Ω–∞–∫
    }

    // üåü –ú–µ—Ç–æ–¥ –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ —Å–Ω–∏–º–∫–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è (–ë–ï–ó –≤–æ–¥–µ–Ω –∑–Ω–∞–∫)
    public String savePublicationImage(MultipartFile file, String username) {
        String publicId = "publications/user_" + username + "/" + UUID.randomUUID();
        return uploadImage(file, publicId, "smolyanVote/publications/user_" + username, false);
    }

    @Override
    public void deleteImage(String imageUrl) {
        try {
            // –ò–∑–≤–ª–∏—á–∞–º–µ public_id –æ—Ç URL-–∞
            String publicId = extractPublicIdFromUrl(imageUrl);
            if (publicId != null) {
                cloudinary.uploader().destroy(publicId, ObjectUtils.emptyMap());
            }
        } catch (Exception e) {
            System.err.println("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Å–Ω–∏–º–∫–∞: " + e.getMessage());
        }
    }



    // üåü –û–±—â –º–µ—Ç–æ–¥ –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Cloudinary
    @SuppressWarnings("unchecked")
    private String uploadImage(MultipartFile file, String publicId, String folder, boolean addWatermark) {
        try {
            // üíæ –ü–™–†–í–û –∑–∞–ø–∞–∑–≤–∞–º–µ –±–∞–π—Ç–æ–≤–µ—Ç–µ
            byte[] fileBytes = file.getBytes();

            // üõ°Ô∏è –ú–û–î–ï–†–ê–¶–ò–Ø –ü–™–†–í–û
            if (!imageModerationService.isFileSafe(fileBytes)) {
                throw new RuntimeException("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ –Ω–µ –ø—Ä–µ–º–∏–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—è—Ç–∞");
            }


            // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            Transformation transformation = new Transformation()
                    .width(1000)
                    .crop("scale")
                    .quality("auto")
                    .fetchFormat("auto");

            if (addWatermark) {
                transformation.overlay("text:Arial_30:SmolyanVote.com")
                        .gravity("south")
                        .y(120)
                        .opacity(20)
                        .color("white")
                        .flags("relative");
            }

            Map<String, Object> uploadOptions = ObjectUtils.asMap(
                    "public_id", publicId,
                    "folder", folder,
                    "transformation", transformation
            );

            Map<String, Object> uploadResult = cloudinary.uploader().upload(fileBytes, uploadOptions);

            String finalUrl = (String) uploadResult.get("url");

            return finalUrl;

        } catch (IOException e) {
            System.err.println("‚ùå IO –ì—Ä–µ—à–∫–∞: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Failed to save image in Cloudinary", e);
        } catch (Exception e) {
            System.err.println("‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ quality –Ω–∞ —Å–Ω–∏–º–∫–∞", e);
        }
    }





    @Override
    public void deleteFolder(String folderPath) {
        try {
            // –ò–∑—Ç—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Ä–µ—Å—É—Ä—Å–∏ —Å –¥–∞–¥–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å
            cloudinary.api().deleteResourcesByPrefix(folderPath, ObjectUtils.emptyMap());

            // –ò–∑—Ç—Ä–∏–≤–∞–º–µ —Å–∞–º–∞—Ç–∞ –ø–∞–ø–∫–∞ (–ø–æ–¥–∞–≤–∞ —Å–µ –≤—Ç–æ—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç)
            cloudinary.api().deleteFolder(folderPath, ObjectUtils.emptyMap());
        } catch (Exception e) {
            System.err.println("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–∞–ø–∫–∞ –æ—Ç Cloudinary: " + e.getMessage());
        }
    }

    @Override
    public String savePodcastImage(MultipartFile file, Long episodeId) {
        String publicId = "podcasts/episode_" + episodeId + "/" + UUID.randomUUID();
        return uploadImage(file, publicId, "smolyanVote/podcasts/episode_" + episodeId, false); // –ë–ï–ó –≤–æ–¥–µ–Ω –∑–Ω–∞–∫
    }


    // Helper –º–µ—Ç–æ–¥
    private String extractPublicIdFromUrl(String imageUrl) {
        try {
            // URL –¥–µ–∫–æ–¥–∏—Ä–∞–Ω–µ –∑–∞ %20 -> space
            String decodedUrl = java.net.URLDecoder.decode(imageUrl, StandardCharsets.UTF_8);

            if (decodedUrl.contains("/smolyanVote/")) {
                int startIndex = decodedUrl.indexOf("/smolyanVote/") + 1; // +1 –∑–∞ –¥–∞ –≤–∫–ª—é—á–∏ smolyanVote/
                int endIndex = decodedUrl.lastIndexOf(".");
                if (startIndex != -1 && endIndex != -1 && endIndex > startIndex) {
                    return decodedUrl.substring(startIndex, endIndex);
                }
            }
        } catch (Exception e) {
            System.err.println("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ public_id: " + e.getMessage());
        }
        return null;
    }
}