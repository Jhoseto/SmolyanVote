package smolyanVote.smolyanVote.services.serviceImpl;

import com.cloudinary.Cloudinary;
import com.cloudinary.Transformation;
import com.cloudinary.utils.ObjectUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import smolyanVote.smolyanVote.services.ImageCloudinaryService;

import java.io.IOException;
import java.util.Map;
import java.util.UUID;

@Service
public class ImageCloudinaryServiceImpl implements ImageCloudinaryService {

    private final Cloudinary cloudinary;

    public ImageCloudinaryServiceImpl(@Value("${cloudinary.cloud_name}") String cloudName,
                                      @Value("${cloudinary.api_key}") String apiKey,
                                      @Value("${cloudinary.api_secret}") String apiSecret) {
        cloudinary = new Cloudinary(ObjectUtils.asMap(
                "cloud_name", cloudName,
                "api_key", apiKey,
                "api_secret", apiSecret
        ));
    }

    // üåü –ú–µ—Ç–æ–¥ –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∞ —Å–Ω–∏–º–∫–∞ (–±–µ–∑ –≤–æ–¥–µ–Ω –∑–Ω–∞–∫)
    @Override
    public String saveUserImage(MultipartFile file, String username) {
        String publicId = "users/user_" + username + "/" + UUID.randomUUID();
        return uploadImage(file, publicId, "smolyanVote/users/user_" + username, false);
    }

    // üåü –ú–µ—Ç–æ–¥ –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ —Å–Ω–∏–º–∫–∞ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ (—Å –≤–æ–¥–µ–Ω –∑–Ω–∞–∫)
    @Override
    public String saveSingleImage(MultipartFile file, Long eventId) {
        String publicId = "events/event_" + eventId + "/" + UUID.randomUUID();
        return uploadImage(file, publicId, "smolyanVote/events/event_" + eventId, true);
    }

    // üåü –ú–µ—Ç–æ–¥ –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ —Å–Ω–∏–º–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω–¥—É–º (—Å –≤–æ–¥–µ–Ω –∑–Ω–∞–∫)
    @Override
    public String saveSingleReferendumImage(MultipartFile file, Long referendumId) {
        String publicId = "referendums/referendum_" + referendumId + "/" + UUID.randomUUID();
        return uploadImage(file, publicId, "smolyanVote/referendums/referendum_" + referendumId, true);
    }

    // üåü –û–±—â –º–µ—Ç–æ–¥ –∑–∞ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Cloudinary
    private String uploadImage(MultipartFile file, String publicId, String folder, boolean addWatermark) {
        try {
            // –û—Å–Ω–æ–≤–Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
            Transformation transformation = new Transformation()
                    .width(1000)
                    .crop("scale")
                    .quality("auto")
                    .fetchFormat("auto");

            // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤–æ–¥–µ–Ω –∑–Ω–∞–∫, –∞–∫–æ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if (addWatermark) {
                transformation.overlay("text:Arial_30:SmolyanVote.com")
                        .gravity("south")  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–∞–Ω–µ –ø–æ-–±–ª–∏–∑–æ –¥–æ –¥–æ–ª–Ω–∞—Ç–∞ —á–∞—Å—Ç
                        .y(120)             // –ò–∑–º–µ—Å—Ç–≤–∞–Ω–µ –º–∞–ª–∫–æ –Ω–∞–≥–æ—Ä–µ
                        .opacity(20)       // –ë–ª–µ–¥ –≤–æ–¥–µ–Ω –∑–Ω–∞–∫
                        .color("white")
                        .flags("relative");
            }

            // –ö–∞—á–≤–∞–Ω–µ –≤ Cloudinary
            Map<String, Object> uploadResult = cloudinary.uploader().upload(file.getBytes(), ObjectUtils.asMap(
                    "public_id", publicId,
                    "folder", folder,
                    "transformation", transformation
            ));
            return (String) uploadResult.get("url");
        } catch (IOException e) {
            throw new RuntimeException("Failed to save image in Cloudinary", e);
        }
    }

    @Override
    public void deleteImage(String imageUrl) {
        // –ê–∫–æ –∏—Å–∫–∞—à, –º–æ–∂–µ—à –¥–∞ –∑–∞–ø–∞–∑–∏—à —Ç–æ–∑–∏ –º–µ—Ç–æ–¥, –Ω–æ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–∞–ø–∫–∞ –Ω—è–º–∞ –¥–∞ –≥–æ –ø–æ–ª–∑–≤–∞–º–µ
    }



    @Override
    public void deleteFolder(String folderPath) {
        try {
            // –ò–∑—Ç—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Ä–µ—Å—É—Ä—Å–∏ —Å –¥–∞–¥–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å
            cloudinary.api().deleteResourcesByPrefix(folderPath, ObjectUtils.emptyMap());

            // –ò–∑—Ç—Ä–∏–≤–∞–º–µ —Å–∞–º–∞—Ç–∞ –ø–∞–ø–∫–∞ (–ø–æ–¥–∞–≤–∞ —Å–µ –≤—Ç–æ—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç)
            cloudinary.api().deleteFolder(folderPath, ObjectUtils.emptyMap());
        } catch (Exception e) {
            System.err.println("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –ø–∞–ø–∫–∞ –æ—Ç Cloudinary: " + e.getMessage());
        }
    }



    // üåü –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ public_id –æ—Ç URL –Ω–∞ Cloudinary
    public String extractPublicIdFromUrl(String url) {
        try {
            // –ü—Ä–∏–º–µ—Ä–µ–Ω URL —á–∞—Å—Ç: .../upload/v1234567890/events/event_123/abcdefg.jpg
            int uploadIndex = url.indexOf("/upload/");
            if (uploadIndex == -1) return null;

            // –í–∑–∏–º–∞–º–µ —á–∞—Å—Ç—Ç–∞ —Å–ª–µ–¥ "/upload/"
            String pathAfterUpload = url.substring(uploadIndex + 8); // +8 = length("/upload/")

            // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –≤–µ—Ä—Å–∏—è—Ç–∞, –∞–∫–æ –∏–º–∞ (–ø—Ä–∏–º–µ—Ä: v1234567890/)
            if (pathAfterUpload.startsWith("v")) {
                int slashAfterVersion = pathAfterUpload.indexOf("/");
                if (slashAfterVersion != -1) {
                    pathAfterUpload = pathAfterUpload.substring(slashAfterVersion + 1);
                }
            }

            // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ —Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ—Ç–æ (.jpg, .png –∏ —Ç.–Ω.)
            int dotIndex = pathAfterUpload.lastIndexOf('.');
            if (dotIndex != -1) {
                pathAfterUpload = pathAfterUpload.substring(0, dotIndex);
            }

            return pathAfterUpload;
        } catch (Exception e) {
            System.err.println("–ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ public_id –æ—Ç URL: " + e.getMessage());
            return null;
        }
    }

}
