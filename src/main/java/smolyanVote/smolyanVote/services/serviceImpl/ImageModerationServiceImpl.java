package smolyanVote.smolyanVote.services.serviceImpl;

import com.cloudinary.Cloudinary;
import com.cloudinary.utils.ObjectUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;
import smolyanVote.smolyanVote.services.interfaces.ImageModerationService;

import java.util.Map;
import java.util.UUID;

@Service
public class ImageModerationServiceImpl implements ImageModerationService {

    private static final String API_URL = "https://api.sightengine.com/1.0/check.json";

    // Cloudinary instance –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ
    private final Cloudinary cloudinary;

    // SightEngine API credentials
    @Value("${sightengine.api.user}")
    private String apiUser;

    @Value("${sightengine.api.secret}")
    private String apiSecret;

    // üéØ –§–ò–ù–û –ù–ê–°–¢–†–û–ï–ù–ò threshold-–∏ –∑–∞ —Ä–∞–∑—É–º–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—è
    private static final double EXPLICIT_THRESHOLD = 0.15;    // 15% explicit = –±–ª–æ–∫–∏—Ä–∞–π (–º–Ω–æ–≥–æ —Å—Ç—Ä–æ–≥–æ)
    private static final double EROTICA_THRESHOLD = 0.25;     // 25% erotica = –±–ª–æ–∫–∏—Ä–∞–π
    private static final double VERY_SUGGESTIVE_THRESHOLD = 0.4; // 40% very suggestive = –±–ª–æ–∫–∏—Ä–∞–π
    private static final double SUGGESTIVE_THRESHOLD = 0.7;   // 70% suggestive = –±–ª–æ–∫–∏—Ä–∞–π (–ø–æ-—Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ)

    // –°–ø–µ—Ü–∏–∞–ª–Ω–∏ threshold-–∏ –∑–∞ –∫–ª–∞—Å–æ–≤–µ
    private static final double BIKINI_THRESHOLD = 0.85;      // 85% –±–∏–∫–∏–Ω–∏ = OK (—Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ)
    private static final double CLEAVAGE_THRESHOLD = 0.6;     // 60% –¥–µ–∫–æ–ª—Ç–µ = –±–ª–æ–∫–∏—Ä–∞–π
    private static final double LINGERIE_THRESHOLD = 0.3;     // 30% –±–µ–ª—å–æ = –±–ª–æ–∫–∏—Ä–∞–π
    private static final double MALE_CHEST_THRESHOLD = 0.8;   // 80% –º—ä–∂–∫–∏ –≥—ä—Ä–¥–∏ = OK
    private static final double POSE_THRESHOLD = 0.25;        // 25% –ø—Ä–æ–≤–æ–∫–∞—Ç–∏–≤–Ω–∏ –ø–æ–∑–∏ = –±–ª–æ–∫–∏—Ä–∞–π

    // Constructor —Å Cloudinary –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    public ImageModerationServiceImpl(@Value("${cloudinary.cloud_name}") String cloudName,
                                      @Value("${cloudinary.api_key}") String apiKey,
                                      @Value("${cloudinary.api_secret}") String apiSecret) {
        cloudinary = new Cloudinary(ObjectUtils.asMap(
                "cloud_name", cloudName,
                "api_key", apiKey,
                "api_secret", apiSecret
        ));
    }

    /**
     * üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —Ñ–∞–π–ª—ä—Ç –µ –±–µ–∑–æ–ø–∞—Å–µ–Ω –∑–∞ –∫–∞—á–≤–∞–Ω–µ
     * –ö–∞—á–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ Cloudinary, –ø—Ä–æ–≤–µ—Ä—è–≤–∞ —Å—ä—Å SightEngine, –∏–∑—Ç—Ä–∏–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω–∏—è —Ñ–∞–π–ª
     */
    @Override
    public boolean isFileSafe(byte[] fileBytes) {
        String tempPublicId = null;
        try {
            tempPublicId = "TEMP/tmp_" + UUID.randomUUID();

            // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –ø–æ–¥–∞–¥–µ–Ω–∏—Ç–µ –±–∞–π—Ç–æ–≤–µ
            Map<String, Object> tempUpload = cloudinary.uploader().upload(fileBytes, ObjectUtils.asMap(
                    "public_id", tempPublicId,
                    "folder", "TEMP",
                    "type", "private"
            ));

            String secureUrl = (String) tempUpload.get("secure_url");
            boolean isSafe = this.isImageSafe(secureUrl);

            return isSafe;

        } catch (Exception e) {
            System.err.println("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è: " + e.getMessage());
            e.printStackTrace();
            return false; // –ü—Ä–∏ –≥—Ä–µ—à–∫–∞ –±–ª–æ–∫–∏—Ä–∞–º–µ –∑–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç
        } finally {
            // üßπ –í–ò–ù–ê–ì–ò –∏–∑—Ç—Ä–∏–≤–∞–º–µ –≤—Ä–µ–º–µ–Ω–Ω–∏—è —Ñ–∞–π–ª
            if (tempPublicId != null) {
                try {
                    cloudinary.uploader().destroy(tempPublicId, ObjectUtils.asMap("type", "private"));
                    System.out.println("üóëÔ∏è –í—Ä–µ–º–µ–Ω–µ–Ω —Ñ–∞–π–ª –∏–∑—Ç—Ä–∏—Ç: " + tempPublicId);
                } catch (Exception e) {
                    System.err.println("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: " + e.getMessage());
                }
            }
        }
    }

    /**
     * üîç –ü—Ä–æ–≤–µ—Ä—è–≤–∞ URL —Å—ä—Å SightEngine API
     */
    @Override
    public boolean isImageSafe(String imageUrl) {
        try {
            RestTemplate restTemplate = new RestTemplate();

            // –ò–∑–≥—Ä–∞–∂–¥–∞–º–µ URL –∑–∞ SightEngine API
            UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(API_URL)
                    .queryParam("url", imageUrl)
                    .queryParam("models", "nudity-2.1") // –°–ê–ú–û nudity –º–æ–¥–µ–ª
                    .queryParam("api_user", apiUser)
                    .queryParam("api_secret", apiSecret);

            // –ò–∑–≤–∏–∫–≤–∞–º–µ SightEngine API
            ResponseEntity<Map> response = restTemplate.getForEntity(builder.toUriString(), Map.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                Map<String, Object> body = response.getBody();
                return analyzeResponse(body);
            }

            // üîí –ü–û–ü–†–ê–í–ö–ê: –ü—Ä–∏ –≥—Ä–µ—à–∫–∞ –≤ API-—Ç–æ –ë–õ–û–ö–ò–†–ê–ú–ï —Å–Ω–∏–º–∫–∞—Ç–∞
            System.out.println("‚ùå SightEngine API –Ω–µ –æ—Ç–≥–æ–≤–æ—Ä–∏ –ø—Ä–∞–≤–∏–ª–Ω–æ, –ë–õ–û–ö–ò–†–ê–ú —Å–Ω–∏–º–∫–∞—Ç–∞ –∑–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç");
            return false;

        } catch (Exception e) {
            System.err.println("‚ùå SightEngine API –≥—Ä–µ—à–∫–∞: " + e.getMessage());
            // üîí –ü–û–ü–†–ê–í–ö–ê: –ü—Ä–∏ –≥—Ä–µ—à–∫–∞ –ë–õ–û–ö–ò–†–ê–ú–ï —Å–Ω–∏–º–∫–∞—Ç–∞
            return false;
        }
    }

    /**
     * üìä –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç SightEngine API
     */
    private boolean analyzeResponse(Map<String, Object> body) {
        if (body == null) {
            System.out.println("‚ö†Ô∏è –ü—Ä–∞–∑–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç SightEngine, –ë–õ–û–ö–ò–†–ê–ú –∑–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç");
            return false; // üîí –ü–û–ü–†–ê–í–ö–ê: –ë–ª–æ–∫–∏—Ä–∞–º–µ –ø—Ä–∏ –ø—Ä–∞–∑–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä
        }

        // Debug - –ø–æ–∫–∞–∑–≤–∞–º–µ –ø—ä–ª–Ω–∏—è –æ—Ç–≥–æ–≤–æ—Ä
        System.out.println("üìã SightEngine –æ—Ç–≥–æ–≤–æ—Ä: " + body);

        if (body.containsKey("nudity")) {
            Map<String, Object> nudity = (Map<String, Object>) body.get("nudity");

            // üîç –ò–∑–≤–ª–∏—á–∞–º–µ –í–°–ò–ß–ö–ò scores
            double sexualActivity = getScore(nudity, "sexual_activity");
            double sexualDisplay = getScore(nudity, "sexual_display");
            double erotica = getScore(nudity, "erotica");
            double verySuggestive = getScore(nudity, "very_suggestive");
            double suggestive = getScore(nudity, "suggestive");


            // üö´ –°–¢–†–û–ì–ò —É—Å–ª–æ–≤–∏—è –∑–∞ explicit —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ
            if (sexualActivity > EXPLICIT_THRESHOLD ||
                    sexualDisplay > EXPLICIT_THRESHOLD ||
                    erotica > EROTICA_THRESHOLD ||
                    verySuggestive > VERY_SUGGESTIVE_THRESHOLD ||
                    suggestive > SUGGESTIVE_THRESHOLD) {

                return false;
            }

            // üîç –§–ò–ù–ò –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ suggestive_classes
            if (nudity.containsKey("suggestive_classes")) {
                Map<String, Object> suggestiveClasses = (Map<String, Object>) nudity.get("suggestive_classes");

                double bikini = getScore(suggestiveClasses, "bikini");
                double cleavage = getScore(suggestiveClasses, "cleavage");
                double lingerie = getScore(suggestiveClasses, "lingerie");
                double maleChest = getScore(suggestiveClasses, "male_chest");
                double suggestivePose = getScore(suggestiveClasses, "suggestive_pose");
                double suggestiveFocus = getScore(suggestiveClasses, "suggestive_focus");
                double miniskirt = getScore(suggestiveClasses, "miniskirt");
                double minishort = getScore(suggestiveClasses, "minishort");


                // üö´ –ë–ª–æ–∫–∏—Ä–∞–º–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏ –∫–ª–∞—Å–æ–≤–µ
                if (lingerie > LINGERIE_THRESHOLD ||           // –ë–µ–ª—å–æ - —Å—Ç—Ä–æ–≥–æ
                        cleavage > CLEAVAGE_THRESHOLD ||           // –î–µ–∫–æ–ª—Ç–µ - —É–º–µ—Ä–µ–Ω–æ
                        suggestivePose > POSE_THRESHOLD ||         // –ü—Ä–æ–≤–æ–∫–∞—Ç–∏–≤–Ω–∏ –ø–æ–∑–∏ - —Å—Ç—Ä–æ–≥–æ
                        suggestiveFocus > POSE_THRESHOLD) {        // –§–æ–∫—É—Å –≤—ä—Ä—Ö—É –∏–Ω—Ç–∏–º–Ω–∏ —á–∞—Å—Ç–∏

                    System.out.println("üö´ –°–Ω–∏–º–∫–∞ –ë–õ–û–ö–ò–†–ê–ù–ê - –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏ –µ–ª–µ–º–µ–Ω—Ç–∏");
                    if (lingerie > LINGERIE_THRESHOLD) System.out.println("  - Lingerie: " + lingerie + " > " + LINGERIE_THRESHOLD);
                    if (cleavage > CLEAVAGE_THRESHOLD) System.out.println("  - Cleavage: " + cleavage + " > " + CLEAVAGE_THRESHOLD);
                    if (suggestivePose > POSE_THRESHOLD) System.out.println("  - Suggestive Pose: " + suggestivePose + " > " + POSE_THRESHOLD);
                    if (suggestiveFocus > POSE_THRESHOLD) System.out.println("  - Suggestive Focus: " + suggestiveFocus + " > " + POSE_THRESHOLD);

                    return false;
                }

                // ‚úÖ –†–∞–∑—Ä–µ—à–∞–≤–∞–º–µ —Ä–∞–∑—É–º–Ω–∏ –Ω–µ—â–∞
                if (bikini > 0 && bikini <= BIKINI_THRESHOLD) {
                }
                if (maleChest > 0 && maleChest <= MALE_CHEST_THRESHOLD) {
                }
            }
        }

        System.out.println("‚úÖ –°–Ω–∏–º–∫–∞ –û–î–û–ë–†–ï–ù–ê –æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—è—Ç–∞");
        return true;
    }

    /**
     * üõ†Ô∏è Helper –º–µ—Ç–æ–¥ –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ score –æ—Ç JSON
     */
    private double getScore(Map<String, Object> map, String key) {
        if (map == null) return 0.0;

        Object value = map.get(key);
        if (value != null && value instanceof Number) {
            return ((Number) value).doubleValue();
        }
        return 0.0;
    }
}