package smolyanVote.smolyanVote.services.serviceImpl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import smolyanVote.smolyanVote.models.CommentsEntity;
import smolyanVote.smolyanVote.models.EventEntity;
import smolyanVote.smolyanVote.repositories.CommentsRepository;
import smolyanVote.smolyanVote.repositories.EventRepository;
import smolyanVote.smolyanVote.services.CommentsService;
import smolyanVote.smolyanVote.services.UserService;

import java.time.Instant;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


@Service
public class CommentsServiceImpl implements CommentsService {
    private final CommentsRepository commentsRepository;
    private final EventRepository eventRepository;
    private final UserService userService;

    // üëá –ò–∑–ø–æ–ª–∑–≤–∞ —Ö–µ—à –∑–∞ –¥–∞ –æ–≥—Ä–∞–Ω–∏—á–∏ –µ–¥–∏–Ω –≥–ª–∞—Å –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
    private final Map<String, Map<Long, String>> voteCache = new HashMap<>();



    @Autowired
    public CommentsServiceImpl(CommentsRepository commentRepository,
                               EventRepository eventRepository,
                               UserService userService) {
        this.commentsRepository = commentRepository;
        this.eventRepository = eventRepository;
        this.userService = userService;
    }


    @Override
    public List<CommentsEntity> getCommentsForEvent(Long eventId) {
        return commentsRepository.findRootCommentsWithRepliesByEventId((eventId));
    }


    @Override
    public CommentsEntity addComment(Long eventId, String author, String text, Long parentId) {
        EventEntity event = eventRepository.findById(eventId).orElseThrow();
        CommentsEntity comment = new CommentsEntity();
        comment.setAuthor(userService.getCurrentUser().getUsername());
        comment.setAuthorImage(userService.getCurrentUser().getImageUrl());
        comment.setCreatedAt(Instant.now());
        comment.setText(text);
        comment.setEvent(event);

        if (parentId != null) {
            CommentsEntity parent = commentsRepository.findById(parentId).orElseThrow();
            comment.setParent(parent);
        }

        commentsRepository.save(comment);
        return comment;
    }

    @Override
    public void deleteAllComments() {
        commentsRepository.deleteAll();
    }



    @Override
    public CommentsEntity commentReaction(Long commentId, String type, String username) {
        CommentsEntity comment = commentsRepository.findById(commentId)
                .orElseThrow(() -> new RuntimeException("–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω"));

        // –ü–æ–∫–∞–∑–≤–∞–º–µ –∫–µ—à–∏—Ä–∞–Ω–∏—Ç–µ –≥–ª–∞—Å–æ–≤–µ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        Map<Long, String> userVotes = voteCache.computeIfAbsent(username, k -> new HashMap<>());
        String currentVote = userVotes.get(commentId); // —Ç–µ–∫—É—â–∏—è –≥–ª–∞—Å –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∑–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∞

        // –ê–∫–æ –≥–ª–∞—Å—É–≤–∞–Ω–µ—Ç–æ –µ "like"
        if ("like".equals(type)) {
            if ("like".equals(currentVote)) {
                return comment; // –ê–∫–æ –≤–µ—á–µ –µ –¥–∞–¥–µ–Ω like, –Ω–µ –ø—Ä–∞–≤–∏–º –Ω–∏—â–æ
            }
            if ("unlike".equals(currentVote)) {
                // –ù–∞–º–∞–ª—è–≤–∞–º–µ –±—Ä–æ—è –Ω–∞ dislike, –∞–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –ø—Ä–æ–º–µ–Ω–∏–ª –≥–ª–∞—Å–∞ —Å–∏ –æ—Ç "unlike" –Ω–∞ "like"
                comment.setUnlikeCount(comment.getUnlikeCount() - 1);
            }
            comment.setLikeCount(comment.getLikeCount() + 1); // –£–≤–µ–ª–∏—á–∞–≤–∞–º–µ like
            userVotes.put(commentId, "like"); // –ó–∞–ø–∏—Å–≤–∞–º–µ –Ω–æ–≤–∏—è –≥–ª–∞—Å –≤ –∫–µ—à–∞
        }

        // –ê–∫–æ –≥–ª–∞—Å—É–≤–∞–Ω–µ—Ç–æ –µ "unlike"
        else if ("unlike".equals(type)) {
            if ("unlike".equals(currentVote)) {
                return comment; // –ê–∫–æ –≤–µ—á–µ –µ –¥–∞–¥–µ–Ω unlike, –Ω–µ –ø—Ä–∞–≤–∏–º –Ω–∏—â–æ
            }
            if ("like".equals(currentVote)) {
                // –ù–∞–º–∞–ª—è–≤–∞–º–µ –±—Ä–æ—è –Ω–∞ like, –∞–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –ø—Ä–æ–º–µ–Ω–∏–ª –≥–ª–∞—Å–∞ —Å–∏ –æ—Ç "like" –Ω–∞ "unlike"
                comment.setLikeCount(comment.getLikeCount() - 1);
            }
            comment.setUnlikeCount(comment.getUnlikeCount() + 1); // –£–≤–µ–ª–∏—á–∞–≤–∞–º–µ unlike
            userVotes.put(commentId, "unlike"); // –ó–∞–ø–∏—Å–≤–∞–º–µ –Ω–æ–≤–∏—è –≥–ª–∞—Å –≤ –∫–µ—à–∞
        }

        // –ó–∞–ø–∏—Å–≤–∞–º–µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—è –∫–æ–º–µ–Ω—Ç–∞—Ä –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        return commentsRepository.save(comment);
    }

}
