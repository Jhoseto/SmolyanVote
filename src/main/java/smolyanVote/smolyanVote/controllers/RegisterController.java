package smolyanVote.smolyanVote.controllers;

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import smolyanVote.smolyanVote.models.UserEntity;
import smolyanVote.smolyanVote.repositories.UserRepository;
import smolyanVote.smolyanVote.services.serviceImpl.UserServiceImpl;
import smolyanVote.smolyanVote.viewsAndDTO.UserRegistrationViewModel;

import java.time.Instant;
import java.util.Optional;

@Controller
public class RegisterController {

    private final UserRepository userRepository;
    private final UserServiceImpl userService;

    @Autowired
    public RegisterController(UserRepository userRepository,
                              UserServiceImpl userService) {
        this.userRepository = userRepository;
        this.userService = userService;
    }

    // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞
    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("userFields", new UserRegistrationViewModel());

        return "registration";
    }

    @PostMapping("/user/registration")
    public String register(
            @Valid UserRegistrationViewModel userRegistrationViewModel,
            BindingResult result,
            RedirectAttributes redirectAttributes,

            // üëá Honeypot –∏ timestamp –ø–æ–ª–µ—Ç–∞—Ç–∞ –æ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∞
            @RequestParam(name = "middleName", required = false) String honeypot,
            @RequestParam(name = "formRenderedAt", required = false) Long formRenderedAt
    ) {
        StringBuilder errorMessages = new StringBuilder();

        // ‚úÖ HONEYPOT –ü–†–û–í–ï–†–ö–ê (–∞–∫–æ –±–æ—Ç –µ –ø–æ–ø—ä–ª–Ω–∏–ª —Å–∫—Ä–∏—Ç–æ—Ç–æ –ø–æ–ª–µ)
        if (honeypot != null && !honeypot.trim().isEmpty()) {
            redirectAttributes.addFlashAttribute("error", "–ë–æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—Å–µ—á–µ–Ω–∞.");
            return "redirect:/register";
        }

        // ‚úÖ TIMESTAMP –ü–†–û–í–ï–†–ö–ê (–∞–∫–æ —Ñ–æ—Ä–º–∞—Ç–∞ –µ –ø—Ä–∞—Ç–µ–Ω–∞ —Ç–≤—ä—Ä–¥–µ –±—ä—Ä–∑–æ - < 5 —Å–µ–∫)
        if (formRenderedAt != null) {
            long now = Instant.now().toEpochMilli();
            if (now - formRenderedAt < 5000) {
                redirectAttributes.addFlashAttribute("error", "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª–Ω–æ –ø–æ–ø—ä–ª–≤–∞–Ω–µ. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.");
                return "redirect:/register";
            }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∏ –≥—Ä–µ—à–∫–∏
        if (result.hasErrors()) {
            for (FieldError error : result.getFieldErrors()) {
                errorMessages.append(error.getDefaultMessage()).append("\n");
            }

            if (!userRegistrationViewModel.isPasswordsMatch()) {
                errorMessages.append("–ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç. ");
            }

            redirectAttributes.addFlashAttribute("error", errorMessages.toString());
            return "redirect:/register";
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –∏–º–µ–π–ª
        Optional<UserEntity> existingUserByEmail = userRepository.findByEmail(userRegistrationViewModel.getEmail());
        if (existingUserByEmail.isPresent()) {
            redirectAttributes.addFlashAttribute("error", "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª –∞–¥—Ä–µ—Å –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞!");
            return "redirect:/register";
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ
        Optional<UserEntity> existingUserByUsername = userRepository.findByUsername(userRegistrationViewModel.getUsername());
        if (existingUserByUsername.isPresent()) {
            redirectAttributes.addFlashAttribute("error", "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ç–æ–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞!");
            return "redirect:/register";
        }

        // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
        userService.createNewUser(userRegistrationViewModel);

        redirectAttributes.addFlashAttribute("successMessage",
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞!\n–ú–æ–ª—è –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –≤–∞—à–∏—è –∏–º–µ–π–ª –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è.\n–ü–æ–≥–ª–µ–¥–Ω–µ—Ç–µ –∏ —Å–ø–∞–º –ø–∞–ø–∫–∞—Ç–∞.");

        return "redirect:/register";
    }
}
