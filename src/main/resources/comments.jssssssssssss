document.addEventListener("DOMContentLoaded", () => {
    const commentForm = document.getElementById("comment-form");
    const commentsSection = document.getElementById("comments-section");
    const targetId = commentsSection?.dataset.targetId;
    const csrfToken = document.querySelector("meta[name='_csrf']")?.getAttribute("content");
    const csrfHeader = document.querySelector("meta[name='_csrf_header']")?.getAttribute("content");

    let activeEditorBox = null;
    let lastEditButton = null;


    if (!commentForm || !targetId) return;

    // Добавяне на коментар
    commentForm.addEventListener("submit", function (e) {
        e.preventDefault();

        const formData = new FormData(this);
        if (!formData.has('targetId')) {
            formData.append('targetId', targetId);
        }

        fetch("/api/comments", {
            method: "POST",
            headers: { [csrfHeader]: csrfToken },
            body: formData
        })
            .then(res => res.ok ? res.json() : res.json().then(err => Promise.reject(err.error)))
            .then(() => window.location.reload())
            .catch(err => alert("Грешка: " + err));
    });

    // Отговор на коментар
    function attachReplyEvents(scope = document) {
        scope.querySelectorAll(".reply-btn").forEach(btn => {
            btn.addEventListener("click", () => {
                const id = btn.dataset.id;
                const form = document.getElementById(`reply-form-${id}`);
                if (form) form.classList.toggle("d-none");
            });
        });

        scope.querySelectorAll(".reply-form").forEach(form => {
            if (form.dataset.bound === "true") return;
            form.dataset.bound = "true";

            form.addEventListener("submit", function (e) {
                e.preventDefault();

                const formData = new FormData(this);
                fetch("/api/comments/reply", {
                    method: "POST",
                    headers: { [csrfHeader]: csrfToken },
                    body: formData
                })
                    .then(res => res.ok ? res.json() : res.json().then(err => Promise.reject(err.error)))
                    .then(data => {
                        const replyHTML = `
                        <div class="border-start ps-3 mb-2 ms-4 mt-2 reply-box" id="reply-${data.id}">
                            <div class="d-flex align-items-start">
                                <img src="${data.authorImage}" class="rounded-circle me-2 mt-1" style="width: 30px; height: 30px;">
                                <div><strong>${data.author}</strong><p>${data.text}</p></div>
                            </div>
                        </div>`;
                        document.getElementById(`replies-container-${data.parentId}`)
                            ?.insertAdjacentHTML("beforeend", replyHTML);
                        this.reset();
                        this.classList.add("d-none");
                    })
                    .then(() => window.location.reload())
                    .catch(err => alert("Грешка: " + err));
            });
        });
    }
    attachReplyEvents();

    // Гласуване (like/dislike)
    document.addEventListener("click", function (e) {
        const btn = e.target.closest(".like-btn, .dislike-btn");
        if (!btn) return;

        const commentBox = btn.closest(".comment-box, .reply-box");
        if (!commentBox) return;

        const likeBtn = commentBox.querySelector(".like-btn");
        const dislikeBtn = commentBox.querySelector(".dislike-btn");
        const commentId = btn.dataset.id;
        const type = btn.dataset.type;

        likeBtn.disabled = true;
        dislikeBtn.disabled = true;

        fetch(`/api/comments/${commentId}/reaction/${type}`, {
            method: "POST",
            headers: {
                [csrfHeader]: csrfToken
            }
        })
            .then(res => {
                if (!res.ok) {
                    return res.json().then(data => Promise.reject(data.error || "Грешка при гласуване"));
                }
                return res.json();
            })
            .then(data => {
                // Обновяване на броя
                const likeCount = likeBtn.querySelector("span");
                const dislikeCount = dislikeBtn.querySelector("span");

                animateCountChange(likeCount, data.likes);
                animateCountChange(dislikeCount, data.dislikes);

                // Премахване на предишни състояния
                [likeBtn, dislikeBtn].forEach(btn => {
                    btn.classList.remove("active-vote");
                    btn.removeAttribute("title");
                });

                // Добавяне на визуално подчертаване и tooltip
                if (data.userVote === "LIKE") {
                    likeBtn.classList.add("active-vote");
                    likeBtn.title = "Гласували сте с ДА";
                } else if (data.userVote === "DISLIKE") {
                    dislikeBtn.classList.add("active-vote");
                    dislikeBtn.title = "Гласували сте с НЕ";
                }
            })
            .catch(err => alert("Грешка при гласуване: " + err))
            .finally(() => {
                likeBtn.disabled = false;
                dislikeBtn.disabled = false;
            });
    });

    function animateCountChange(span, newValue) {
        if (parseInt(span.textContent) !== newValue) {
            span.classList.add("count-change");
            span.textContent = newValue;
            setTimeout(() => span.classList.remove("count-change"), 400);
        }
    }




    // Скриване на отговорите
    document.querySelectorAll('.replies').forEach(container => {
        const list = container.querySelector('.replies-list');
        const btn = container.querySelector('.show-replies-btn');

        if (list) list.style.display = 'none';
        if (btn) {
            btn.style.display = 'inline-block';
            btn.addEventListener('click', () => {
                list.style.display = 'block';
                btn.style.display = 'none';
            });
        }
    });

    // Изтриване
    document.addEventListener("click", function (e) {
        const btn = e.target.closest(".delete-btn");
        if (!btn) return;

        const id = btn.dataset.id;
        if (!confirm("Сигурни ли сте, че искате да изтриете този коментар?")) return;

        fetch(`/api/comments/${id}`, {
            method: "DELETE",
            headers: { [csrfHeader]: csrfToken }
        })
            .then(res => res.ok ? document.getElementById(`comment-${id}`)?.remove() : res.json().then(err => Promise.reject(err.error)))
            .catch(err => alert("Грешка при изтриване: " + err));
    });



    // РЕДАКЦИЯ


    document.addEventListener('click', function (e) {
        const btn = e.target.closest('.edit-btn');
        if (!btn) return;

        const commentBox = btn.closest('.comment-box, .reply-box');
        const commentId = btn.dataset.id;
        const originalTextEl = commentBox.querySelector('.comment-text, .reply-text');
        const editContainer = commentBox.querySelector('.edit-container');

        // Ако има отворен редактор - затвори го
        if (activeEditorBox && activeEditorBox !== commentBox) {
            const activeOriginalText = activeEditorBox.querySelector('.comment-text, .reply-text');
            const activeEditContainer = activeEditorBox.querySelector('.edit-container');
            const prevEditBtn = activeEditorBox.querySelector('.edit-btn');

            activeEditContainer.classList.add('d-none');
            activeEditContainer.innerHTML = '';
            activeOriginalText.classList.remove('d-none');
            if (prevEditBtn) prevEditBtn.classList.remove('d-none');
        }

        // Задай нов активен редактор
        activeEditorBox = commentBox;
        lastEditButton = btn;

        // Скрий бутона "Редактирай"
        btn.classList.add('d-none');

        // Покажи textarea с текущия текст
        const currentText = originalTextEl.innerText.trim();
        editContainer.innerHTML = `
        <textarea class="form-control" rows="4">${currentText}</textarea>
        <button class="btn btn-sm btn-success save-edit-btn mt-2" data-id="${commentId}">✔ Запази</button>
        <button class="btn btn-sm btn-secondary cancel-edit-btn mt-2" data-id="${commentId}">✖ Отказ</button>
    `;
        originalTextEl.classList.add('d-none');
        editContainer.classList.remove('d-none');
    });

// Натискане на "Отказ"
    document.addEventListener('click', function (e) {
        const btn = e.target.closest('.cancel-edit-btn');
        if (!btn) return;

        const commentBox = btn.closest('.comment-box, .reply-box');
        const editContainer = commentBox.querySelector('.edit-container');
        const originalTextEl = commentBox.querySelector('.comment-text, .reply-text');
        const editBtn = commentBox.querySelector('.edit-btn');

        editContainer.classList.add('d-none');
        editContainer.innerHTML = '';
        originalTextEl.classList.remove('d-none');
        if (editBtn) editBtn.classList.remove('d-none');

        activeEditorBox = null;
        lastEditButton = null;
    });

// Натискане на "Запази"
    document.addEventListener('click', function (e) {
        const btn = e.target.closest('.save-edit-btn');
        if (!btn) return;

        const commentId = btn.dataset.id;
        const commentBox = btn.closest('.comment-box, .reply-box');
        const textarea = commentBox.querySelector('textarea');
        const newText = textarea.value.trim();

        fetch(`/api/comments/${commentId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                [csrfHeader]: csrfToken
            },
            body: JSON.stringify({ text: newText })
        })
            .then(res => {
                if (!res.ok) {
                    return res.text().then(text => {
                        try {
                            const json = JSON.parse(text);
                            throw new Error(json.error || "Грешка при редактиране.");
                        } catch {
                            throw new Error("Невалиден отговор от сървъра.");
                        }
                    });
                }
                return res.json();
            })
            .then(data => {
                const originalTextEl = commentBox.querySelector('.comment-text, .reply-text');
                const editContainer = commentBox.querySelector('.edit-container');
                const editBtn = commentBox.querySelector('.edit-btn');

                originalTextEl.innerHTML = data.text;
                originalTextEl.classList.remove('d-none');
                editContainer.classList.add('d-none');
                editContainer.innerHTML = '';
                if (editBtn) editBtn.classList.remove('d-none');

                activeEditorBox = null;
                lastEditButton = null;
            })
            .catch(err => alert("Грешка при редактиране: " + err.message));
    });

});
//EMOJI
document.addEventListener('DOMContentLoaded', () => {
    const emojiBtn = document.getElementById('emoji-btn');
    const emojiPicker = document.getElementById('emoji-picker');
    const textarea = document.getElementById('main-editor');

    // Зареждаме емоджитата динамично в emojiPicker
    emojiPicker.innerHTML = '';
    emojis.forEach(emoji => {
        const span = document.createElement('span');
        span.classList.add('emoji');
        span.textContent = emoji;
        span.style.cursor = 'pointer';
        span.style.fontSize = '15px';
        span.style.margin = '0';
        emojiPicker.appendChild(span);
    });

    // Показване/скриване на emoji picker при клик на бутона
    emojiBtn.addEventListener('click', () => {
        console.log('Emoji button clicked!');
        if (!emojiPicker) return;
        emojiPicker.style.display = (emojiPicker.style.display === 'block') ? 'none' : 'block';
    });

    // Добавяне на emoji към textarea при клик върху emoji
    emojiPicker.addEventListener('click', (e) => {
        if (e.target.classList.contains('emoji')) {
            textarea.value += e.target.textContent;
            textarea.focus();
            emojiPicker.style.display = 'none'; // Скриваме picker след избор
        }
    });

    // Скриване на emoji picker ако кликнеш извън него или бутона
    document.addEventListener('click', (e) => {
        const isClickInsidePicker = emojiPicker.contains(e.target);
        const isClickOnButton = emojiBtn.contains(e.target);
        if (!isClickInsidePicker && !isClickOnButton) {
            emojiPicker.style.display = 'none';
        }
    });
});



