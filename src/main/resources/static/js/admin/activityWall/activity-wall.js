// ====== ADMIN ACTIVITY WALL - CORE (–§–ò–ö–°–ò–†–ê–ù) ======
// –§–∞–π–ª: src/main/resources/static/js/admin/activityWall/activity-wall.js

class ActivityWall {
    constructor() {
        // ===== –û–°–ù–û–í–ù–ò –ù–ê–°–¢–†–û–ô–ö–ò =====
        this.isLive = true;
        this.isPaused = false;
        this.activities = [];
        this.filteredActivities = [];
        this.currentPage = 0;
        this.pageSize = 20;
        this.maxActivities = 1000;
        this.refreshInterval = null;
        this.websocket = null;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.connectionTimeout = null;

        // ===== –§–ò–õ–¢–†–ò =====
        this.filters = {
            timeRange: 'all',
            user: '',
            ip: '',
            action: '',
            entityType: '',
            dateStart: null,
            dateEnd: null
        };

        // ===== CALLBACKS –ó–ê –î–†–£–ì–ò –ú–û–î–£–õ–ò =====
        this.updateCallbacks = [];

        this.init();
    }

    // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –° –ü–†–û–í–ï–†–ö–ò =====

    async init() {

        if (!this.checkRequiredElements()) {
            console.error('‚ùå Activity Wall: Required elements missing');
            return;
        }

        if (!this.checkDependencies()) {
            console.error('‚ùå Activity Wall: Required dependencies missing');
            return;
        }

        this.setupEventListeners();
        await this.loadInitialActivities();
        await this.startLiveStream();

        // ‚úÖ –ò–∑–≤–µ—Å—Ç—è–≤–∞–º–µ –¥—Ä—É–≥–∏—Ç–µ –º–æ–¥—É–ª–∏
        this.notifyInitialized();

        console.log('‚úÖ Activity Wall: Initialized successfully');
    }

    checkRequiredElements() {
        const required = [
            'activity-wall',
            'activity-table-body',
            'live-status-indicator',
            'activity-toggle-btn'
        ];

        for (const id of required) {
            if (!document.getElementById(id)) {
                console.error(`‚ùå Missing element: ${id}`);
                return false;
            }
        }
        return true;
    }

    // üî• –ù–û–í –ú–ï–¢–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ dependencies
    checkDependencies() {
        const dependencies = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ SockJS
        if (typeof SockJS === 'undefined') {
            dependencies.push('SockJS –Ω–µ –µ –∑–∞—Ä–µ–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ Bootstrap
        if (typeof bootstrap === 'undefined') {
            dependencies.push('Bootstrap –Ω–µ –µ –∑–∞—Ä–µ–¥–µ–Ω');
        }

        if (dependencies.length > 0) {
            console.error('‚ùå Missing dependencies:', dependencies);
            this.showError(`–õ–∏–ø—Å–≤–∞—â–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: ${dependencies.join(', ')}`);
            return false;
        }

        return true;
    }

    // ===== EVENT LISTENERS =====

    setupEventListeners() {
        // ===== LIVE TOGGLE =====
        const toggleBtn = document.getElementById('activity-toggle-btn');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => this.toggleLiveStatus());
        }

        // ===== REFRESH BUTTON =====
        const refreshBtn = document.getElementById('activity-refresh-btn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => this.manualRefresh());
        }

        // ===== CLEAR BUTTON =====
        const clearBtn = document.getElementById('activity-clear-btn');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => this.clearActivities());
        }

        // ===== EXPORT BUTTON =====
        const exportBtn = document.getElementById('activity-export-btn');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => this.exportActivities());
        }

        // ===== TIME RANGE BUTTONS =====
        const timeButtons = document.querySelectorAll('.time-btn');
        timeButtons.forEach(btn => {
            btn.addEventListener('click', (e) => this.handleTimeRangeClick(e));
        });

        // ===== CUSTOM DATE RANGE =====
        const applyDateBtn = document.getElementById('apply-date-range-btn');
        if (applyDateBtn) {
            applyDateBtn.addEventListener('click', () => this.applyCustomDateRange());
        }

        // ===== SEARCH FILTERS =====
        this.setupSearchFilters();

        // ===== PAGINATION =====
        const prevBtn = document.getElementById('prev-page-btn');
        const nextBtn = document.getElementById('next-page-btn');
        if (prevBtn) prevBtn.addEventListener('click', () => this.previousPage());
        if (nextBtn) nextBtn.addEventListener('click', () => this.nextPage());

        // ===== RESET FILTERS =====
        const resetBtn = document.getElementById('activity-reset-filters-btn');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => this.resetFilters());
        }

        // ===== TABLE ROW CLICKS =====
        const tableBody = document.getElementById('activity-table-body');
        if (tableBody) {
            tableBody.addEventListener('click', (e) => {
                const row = e.target.closest('tr[data-activity-id]');
                if (row) {
                    this.showActivityDetails(row.dataset.activityId);
                }
            });
        }
    }

    setupSearchFilters() {
        // USER SEARCH
        const userInput = document.getElementById('user-search-input');
        const clearUserBtn = document.getElementById('clear-user-search');

        if (userInput) {
            userInput.addEventListener('input', (e) => {
                this.filters.user = e.target.value.trim().toLowerCase();
                this.applyFilters();
                this.toggleClearButton(clearUserBtn, this.filters.user);
            });
        }

        if (clearUserBtn) {
            clearUserBtn.addEventListener('click', () => {
                userInput.value = '';
                this.filters.user = '';
                this.applyFilters();
                clearUserBtn.style.display = 'none';
            });
        }

        // IP SEARCH
        const ipInput = document.getElementById('ip-search-input');
        const clearIpBtn = document.getElementById('clear-ip-search');

        if (ipInput) {
            ipInput.addEventListener('input', (e) => {
                this.filters.ip = e.target.value.trim();
                this.applyFilters();
                this.toggleClearButton(clearIpBtn, this.filters.ip);
            });
        }

        if (clearIpBtn) {
            clearIpBtn.addEventListener('click', () => {
                ipInput.value = '';
                this.filters.ip = '';
                this.applyFilters();
                clearIpBtn.style.display = 'none';
            });
        }

        // ACTION SELECT
        const actionSelect = document.getElementById('action-filter-select');
        if (actionSelect) {
            actionSelect.addEventListener('change', (e) => {
                this.filters.action = e.target.value;
                this.applyFilters();
            });
        }

        // ENTITY TYPE SELECT
        const entitySelect = document.getElementById('entity-filter-select');
        if (entitySelect) {
            entitySelect.addEventListener('change', (e) => {
                this.filters.entityType = e.target.value;
                this.applyFilters();
            });
        }
    }

    // ===== TIME RANGE HANDLING =====

    handleTimeRangeClick(e) {
        const btn = e.target;
        const range = btn.dataset.range;

        // Update button states
        document.querySelectorAll('.time-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');

        // Show/hide custom date range
        const customDateRange = document.getElementById('custom-date-range');
        if (customDateRange) {
            customDateRange.style.display = range === 'custom' ? 'block' : 'none';
        }

        this.filters.timeRange = range;
        this.applyFilters();
    }

    applyCustomDateRange() {
        const startInput = document.getElementById('date-start-input');
        const endInput = document.getElementById('date-end-input');

        if (!startInput || !endInput) return;

        const startValue = startInput.value;
        const endValue = endInput.value;

        if (!startValue || !endValue) {
            this.showToast('–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –∏ –¥–≤–µ—Ç–µ –¥–∞—Ç–∏', 'warning');
            return;
        }

        this.filters.dateStart = new Date(startValue);
        this.filters.dateEnd = new Date(endValue);
        this.filters.timeRange = 'custom';

        this.applyFilters();
        this.showToast('–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω', 'success');
    }

    // ===== LIVE STREAM MANAGEMENT =====

    toggleLiveStatus() {
        if (this.isLive && !this.isPaused) {
            this.pauseLiveStream();
        } else if (this.isPaused) {
            this.resumeLiveStream();
        } else {
            this.startLiveStream();
        }
    }

    async startLiveStream() {
        this.isLive = true;
        this.isPaused = false;
        this.reconnectAttempts = 0;
        this.updateLiveStatusUI();

        await this.setupWebSocket();
        this.startRefreshInterval();
    }

    pauseLiveStream() {
        this.isPaused = true;
        this.updateLiveStatusUI();
    }

    resumeLiveStream() {
        this.isPaused = false;
        this.updateLiveStatusUI();
        this.loadRecentActivities();
    }

    stopLiveStream() {
        this.isLive = false;
        this.isPaused = false;
        this.cleanup();
        this.updateLiveStatusUI();
    }

    updateLiveStatusUI() {
        const indicator = document.getElementById('live-status-indicator');
        const toggleBtn = document.getElementById('activity-toggle-btn');

        if (!indicator || !toggleBtn) return;

        indicator.classList.remove('paused', 'stopped');

        if (!this.isLive) {
            indicator.classList.add('stopped');
            indicator.querySelector('.live-text').textContent = 'Stopped';
            toggleBtn.innerHTML = '<i class="bi bi-play-fill"></i><span>–°—Ç–∞—Ä—Ç</span>';
        } else if (this.isPaused) {
            indicator.classList.add('paused');
            indicator.querySelector('.live-text').textContent = 'Paused';
            toggleBtn.innerHTML = '<i class="bi bi-play-fill"></i><span>–ü—Ä–æ–¥—ä–ª–∂–∏</span>';
        } else {
            indicator.querySelector('.live-text').textContent = 'Live';
            toggleBtn.innerHTML = '<i class="bi bi-pause-fill"></i><span>–ü–∞—É–∑–∞</span>';
        }
    }

    // ===== üî• –§–ò–ö–°–ò–†–ê–ù WEBSOCKET CONNECTION =====

    async setupWebSocket() {
        if (typeof SockJS === 'undefined') {
            console.error('‚ùå SockJS –Ω–µ –µ –∑–∞—Ä–µ–¥–µ–Ω');
            this.showError('SockJS –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ç–∞ –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–Ω–∞');
            return;
        }

        try {
            // ‚úÖ –ü–†–ê–í–ò–õ–ù–ê URL –ö–û–ù–°–¢–†–£–ö–¶–ò–Ø
            const wsUrl = this.buildWebSocketURL();
            console.log('üîå Connecting to WebSocket:', wsUrl);

            this.websocket = new SockJS(wsUrl);

            // ‚úÖ Connection timeout
            this.connectionTimeout = setTimeout(() => {
                if (this.websocket && this.websocket.readyState !== SockJS.OPEN) {
                    console.warn('‚ö†Ô∏è WebSocket connection timeout');
                    this.websocket.close();
                }
            }, 10000); // 10 seconds timeout

            this.websocket.onopen = () => {
                console.log('‚úÖ WebSocket connected');
                this.reconnectAttempts = 0;

                if (this.connectionTimeout) {
                    clearTimeout(this.connectionTimeout);
                    this.connectionTimeout = null;
                }

                this.sendWebSocketMessage('get_recent', { limit: 50 });
            };

            this.websocket.onmessage = (event) => {
                try {
                    const message = JSON.parse(event.data);
                    this.handleWebSocketMessage(message);
                } catch (error) {
                    console.error('‚ùå WebSocket message parse error:', error);
                }
            };

            this.websocket.onclose = (event) => {
                console.log('üîå WebSocket closed:', event.code, event.reason);

                if (this.connectionTimeout) {
                    clearTimeout(this.connectionTimeout);
                    this.connectionTimeout = null;
                }

                this.attemptReconnect();
            };

            this.websocket.onerror = (error) => {
                console.error('‚ùå WebSocket error:', error);
                this.showError('WebSocket –≥—Ä–µ—à–∫–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞'));
            };

        } catch (error) {
            console.error('‚ùå Failed to setup WebSocket:', error);
            this.showError('–ù–µ –º–æ–∂–∞—Ö –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å WebSocket —Å—ä—Ä–≤—ä—Ä–∞');
        }
    }

    // üî• –ù–û–í –ú–ï–¢–û–î: –ü—Ä–∞–≤–∏–ª–Ω–æ URL –ø–æ—Å—Ç—Ä–æ—è–≤–∞–Ω–µ
    buildWebSocketURL() {
        const protocol = window.location.protocol === 'https:' ? 'https:' : 'http:';
        const hostname = window.location.hostname;
        const port = window.location.port;

        // –ó–∞ localhost –∏ development
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            const wsPort = port || '2662';
            return `${protocol}//${hostname}:${wsPort}/ws/admin/activity`;
        }

        // –ó–∞ production
        return `${protocol}//${window.location.host}/ws/admin/activity`;
    }

    // üî• –ù–û–í –ú–ï–¢–û–î: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ reconnect
    attemptReconnect() {
        if (!this.isLive || this.isPaused) return;

        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            console.error('‚ùå –ú–∞–∫—Å–∏–º–∞–ª–µ–Ω –±—Ä–æ–π –æ–ø–∏—Ç–∏ –∑–∞ –≤—Ä—ä–∑–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω–∞—Ç');
            this.showError('–ù–µ –º–æ–≥–∞ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–∞ —Å —Å—ä—Ä–≤—ä—Ä–∞. –ú–æ–ª—è —Ä–µ—Ñ—Ä–µ—à–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞.');
            this.stopLiveStream();
            return;
        }

        this.reconnectAttempts++;
        const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000); // Exponential backoff

        console.log(`üîÑ Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);

        setTimeout(() => {
            if (this.isLive && !this.isPaused) {
                this.setupWebSocket();
            }
        }, delay);
    }

    sendWebSocketMessage(type, data = {}) {
        if (this.websocket && this.websocket.readyState === SockJS.OPEN) {
            const message = {
                type: type,
                data: data,
                timestamp: new Date().toISOString()
            };
            this.websocket.send(JSON.stringify(message));
        } else {
            console.warn('‚ö†Ô∏è WebSocket –Ω–µ –µ –≥–æ—Ç–æ–≤ –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏—è');
        }
    }

    handleWebSocketMessage(message) {
        switch (message.type) {
            case 'new_activity':
                if (message.data && !this.isPaused) {
                    this.addNewActivity(message.data, true);
                }
                break;
            case 'recent_activities':
                if (message.data && Array.isArray(message.data)) {
                    this.activities = message.data;
                    this.applyFilters();
                }
                break;
            case 'error':
                console.error('‚ùå WebSocket server error:', message.data);
                this.showError('–°—ä—Ä–≤—ä—Ä–Ω–∞ –≥—Ä–µ—à–∫–∞: ' + (message.data?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞'));
                break;
            default:
                console.warn('‚ö†Ô∏è Unknown WebSocket message type:', message.type);
        }
    }

    startRefreshInterval() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
        }

        this.refreshInterval = setInterval(() => {
            if (this.isLive && !this.isPaused) {
                this.loadRecentActivities();
            }
        }, 5000);
    }

    // ===== DATA LOADING –° –ü–û–î–û–ë–†–ï–ù–ê ERROR HANDLING =====

    async loadInitialActivities() {
        try {
            this.showLoading();

            const response = await fetch('/admin/api/activities', {
                headers: { 'X-XSRF-TOKEN': this.getCsrfToken() },
                signal: AbortSignal.timeout(10000) // 10 second timeout
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            if (data.success && data.activities) {
                this.activities = data.activities;
                this.applyFilters();
                console.log('‚úÖ Initial activities loaded:', this.activities.length);
            } else {
                throw new Error(data.message || '–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
            }

        } catch (error) {
            console.error('‚ùå Error loading activities:', error);

            if (error.name === 'TimeoutError') {
                this.showError('–í—Ä–µ–º–µ—Ç–æ –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –∏–∑—Ç–µ—á–µ');
            } else if (error.name === 'TypeError') {
                this.showError('–ú—Ä–µ–∂–æ–≤–∞ –≥—Ä–µ—à–∫–∞ - –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Ä—ä–∑–∫–∞—Ç–∞');
            } else {
                this.showError('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ—Ç–æ: ' + error.message);
            }
        }
    }

    async loadRecentActivities() {
        if (!this.isLive || this.isPaused) return;

        try {
            const lastId = this.activities.length > 0 ? this.activities[0].id : 0;

            const response = await fetch(`/admin/api/activities/since/${lastId}`, {
                headers: { 'X-XSRF-TOKEN': this.getCsrfToken() },
                signal: AbortSignal.timeout(5000)
            });

            if (!response.ok) return;

            const data = await response.json();
            const newActivities = data.activities || [];

            if (newActivities.length > 0) {
                newActivities.reverse().forEach(activity => {
                    this.addNewActivity(activity, false);
                });
                console.log('‚úÖ New activities loaded:', newActivities.length);
            }

        } catch (error) {
            console.error('‚ùå Error loading recent activities:', error);
        }
    }

    addNewActivity(activity, isRealTime = false) {
        this.activities.unshift(activity);

        if (this.activities.length > this.maxActivities) {
            this.activities = this.activities.slice(0, this.maxActivities);
        }

        this.applyFilters();

        // ‚úÖ –£–≤–µ–¥–æ–º—è–≤–∞–º–µ –¥—Ä—É–≥–∏ –º–æ–¥—É–ª–∏ –∑–∞ –Ω–æ–≤–∞—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
        if (isRealTime) {
            this.notifyActivityAdded(activity);
        }
    }

    async manualRefresh() {
        const refreshBtn = document.getElementById('activity-refresh-btn');
        if (refreshBtn) {
            refreshBtn.classList.add('spin');
        }

        try {
            await this.loadInitialActivities();
            this.showToast('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏—Ç–µ —Å–∞ –æ–±–Ω–æ–≤–µ–Ω–∏', 'success');
        } catch (error) {
            this.showToast('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ', 'error');
        } finally {
            if (refreshBtn) {
                setTimeout(() => {
                    refreshBtn.classList.remove('spin');
                }, 500);
            }
        }
    }

    // ===== FILTERING =====

    applyFilters() {
        this.filteredActivities = this.activities.filter(activity => {
            // Time range filter
            if (!this.passesTimeFilter(activity)) return false;

            // User filter
            if (this.filters.user && !activity.username?.toLowerCase().includes(this.filters.user)) {
                return false;
            }

            // IP filter
            if (this.filters.ip && !activity.ipAddress?.includes(this.filters.ip)) {
                return false;
            }

            // Action filter
            if (this.filters.action && activity.action !== this.filters.action) {
                return false;
            }

            // Entity type filter
            if (this.filters.entityType && activity.entityType !== this.filters.entityType) {
                return false;
            }

            return true;
        });

        this.currentPage = 0;
        this.renderActivities();
        this.updateStats();
        this.updatePaginationUI();

        // ‚úÖ –£–≤–µ–¥–æ–º—è–≤–∞–º–µ –¥—Ä—É–≥–∏ –º–æ–¥—É–ª–∏ –∑–∞ –ø—Ä–æ–º—è–Ω–∞—Ç–∞ –≤ —Ñ–∏–ª—Ç—Ä–∏—Ç–µ
        this.notifyFiltersChanged();
    }

    passesTimeFilter(activity) {
        if (this.filters.timeRange === 'all') return true;

        const activityTime = new Date(activity.timestamp);
        const now = new Date();

        switch (this.filters.timeRange) {
            case '1h':
                return activityTime > new Date(now - 60 * 60 * 1000);
            case '5h':
                return activityTime > new Date(now - 5 * 60 * 60 * 1000);
            case '12h':
                return activityTime > new Date(now - 12 * 60 * 60 * 1000);
            case '24h':
                return activityTime > new Date(now - 24 * 60 * 60 * 1000);
            case '48h':
                return activityTime > new Date(now - 48 * 60 * 60 * 1000);
            case 'custom':
                if (this.filters.dateStart && activityTime < this.filters.dateStart) return false;
                if (this.filters.dateEnd && activityTime > this.filters.dateEnd) return false;
                return true;
            default:
                return true;
        }
    }

    // ===== RENDERING =====

    renderActivities() {
        const startTime = performance.now();

        const tableBody = document.getElementById('activity-table-body');
        const emptyState = document.getElementById('empty-state');

        if (!tableBody) return;

        const startIndex = this.currentPage * this.pageSize;
        const endIndex = startIndex + this.pageSize;
        const pageActivities = this.filteredActivities.slice(startIndex, endIndex);

        if (pageActivities.length === 0) {
            tableBody.innerHTML = '';
            if (emptyState) emptyState.style.display = 'block';
            return;
        }

        if (emptyState) emptyState.style.display = 'none';

        // ‚úÖ –ò–∑–ø–æ–ª–∑–≤–∞–º–µ DocumentFragment –∑–∞ –ø–æ-–¥–æ–±—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–Ω–æ—Å—Ç
        const fragment = document.createDocumentFragment();

        pageActivities.forEach(activity => {
            const row = document.createElement('tr');
            row.className = 'activity-row';
            row.setAttribute('data-activity-id', activity.id);
            row.innerHTML = this.renderActivityRow(activity);
            fragment.appendChild(row);
        });

        tableBody.innerHTML = '';
        tableBody.appendChild(fragment);

        const endTime = performance.now();
        console.log(`‚úÖ Rendered ${pageActivities.length} activities in ${Math.round(endTime - startTime)}ms`);
    }

    renderActivityRow(activity) {
        const timeFormatted = this.formatTime(activity.timestamp);
        const userDisplay = this.formatUser(activity);
        const actionDisplay = this.formatAction(activity.action);
        const entityDisplay = this.formatEntity(activity);

        return `
            <td class="col-time">${timeFormatted}</td>
            <td class="col-user">${userDisplay}</td>
            <td class="col-action">${actionDisplay}</td>
            <td class="col-entity">${entityDisplay}</td>
            <td class="col-ip">${activity.ipAddress || '--'}</td>
            <td class="col-actions">
                <button class="details-btn" title="–í–∏–∂ –¥–µ—Ç–∞–π–ª–∏">
                    <i class="bi bi-info-circle"></i>
                </button>
            </td>
        `;
    }

    // ===== PAGINATION =====

    previousPage() {
        if (this.currentPage > 0) {
            this.currentPage--;
            this.renderActivities();
            this.updatePaginationUI();
        }
    }

    nextPage() {
        const maxPage = Math.ceil(this.filteredActivities.length / this.pageSize) - 1;
        if (this.currentPage < maxPage) {
            this.currentPage++;
            this.renderActivities();
            this.updatePaginationUI();
        }
    }

    updatePaginationUI() {
        const totalPages = Math.ceil(this.filteredActivities.length / this.pageSize);
        const startItem = this.currentPage * this.pageSize + 1;
        const endItem = Math.min(startItem + this.pageSize - 1, this.filteredActivities.length);

        const paginationInfo = document.getElementById('pagination-info');
        const pageInfo = document.getElementById('page-info');
        const prevBtn = document.getElementById('prev-page-btn');
        const nextBtn = document.getElementById('next-page-btn');

        if (paginationInfo) {
            paginationInfo.textContent = `–ü–æ–∫–∞–∑–≤–∞–Ω–µ ${startItem}-${endItem} –æ—Ç ${this.filteredActivities.length}`;
        }

        if (pageInfo) {
            pageInfo.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${this.currentPage + 1} –æ—Ç ${totalPages || 1}`;
        }

        if (prevBtn) {
            prevBtn.disabled = this.currentPage === 0;
        }

        if (nextBtn) {
            nextBtn.disabled = this.currentPage >= (totalPages - 1);
        }
    }

    // ===== FORMATTING FUNCTIONS =====

    formatTime(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const diffInMinutes = Math.floor((now - date) / (1000 * 60));

        if (diffInMinutes < 1) return '—Å–µ–≥–∞';
        if (diffInMinutes < 60) return `${diffInMinutes}–º`;
        if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}—á`;

        return date.toLocaleDateString('bg-BG');
    }

    formatUser(activity) {
        const username = activity.username || '–ê–Ω–æ–Ω–∏–º–µ–Ω';
        if (activity.userId) {
            return `
                <div class="user-cell">
                    <div class="user-avatar-placeholder">${username.charAt(0).toUpperCase()}</div>
                    <a href="/profile/${username}" class="username-link" target="_blank">${username}</a>
                </div>
            `;
        }
        return `<div class="user-cell"><span>${username}</span></div>`;
    }

    formatAction(action) {
        const actionMap = {
            // ===== –ü–£–ë–õ–ò–ö–ê–¶–ò–ò =====
            'CREATE_PUBLICATION': '–°—ä–∑–¥–∞–¥–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
            'UPDATE_PUBLICATION': '–†–µ–¥–∞–∫—Ç–∏—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
            'DELETE_PUBLICATION': '–ò–∑—Ç—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
            'VIEW_PUBLICATION': '–ü—Ä–µ–≥–ª–µ–¥–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è',

            // ===== –û–ü–†–û–°–¢–ï–ù –í–ò–î –°–™–ë–ò–¢–ò–ï =====
            'CREATE_SIMPLE_EVENT': '–°—ä–∑–¥–∞–¥–µ –æ–ø—Ä–æ—Å—Ç–µ–Ω –≤–∏–¥ —Å—ä–±–∏—Ç–∏–µ',
            'UPDATE_SIMPLE_EVENT': '–†–µ–¥–∞–∫—Ç–∏—Ä–∞ –æ–ø—Ä–æ—Å—Ç–µ–Ω –≤–∏–¥ —Å—ä–±–∏—Ç–∏–µ',
            'DELETE_SIMPLE_EVENT': '–ò–∑—Ç—Ä–∏ –æ–ø—Ä–æ—Å—Ç–µ–Ω –≤–∏–¥ —Å—ä–±–∏—Ç–∏–µ',
            'VOTE_SIMPLE_EVENT': '–ì–ª–∞—Å—É–≤–∞ –≤ –æ–ø—Ä–æ—Å—Ç–µ–Ω –≤–∏–¥ —Å—ä–±–∏—Ç–∏–µ',
            'CHANGE_VOTE_SIMPLE_EVENT': '–ü—Ä–æ–º–µ–Ω–∏ –≥–ª–∞—Å–∞ –≤ –æ–ø—Ä–æ—Å—Ç–µ–Ω –≤–∏–¥ —Å—ä–±–∏—Ç–∏–µ',
            'VIEW_SIMPLE_EVENT': '–ü—Ä–µ–≥–ª–µ–¥–∞ –æ–ø—Ä–æ—Å—Ç–µ–Ω –≤–∏–¥ —Å—ä–±–∏—Ç–∏–µ',

            // ===== –†–ï–§–ï–†–ï–ù–î–£–ú–ò =====
            'CREATE_REFERENDUM': '–°—ä–∑–¥–∞–¥–µ —Ä–µ—Ñ–µ—Ä–µ–Ω–¥—É–º',
            'UPDATE_REFERENDUM': '–†–µ–¥–∞–∫—Ç–∏—Ä–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω–¥—É–º',
            'DELETE_REFERENDUM': '–ò–∑—Ç—Ä–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω–¥—É–º',
            'VOTE_REFERENDUM': '–ì–ª–∞—Å—É–≤–∞ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω–¥—É–º',
            'CHANGE_VOTE_REFERENDUM': '–ü—Ä–æ–º–µ–Ω–∏ –≥–ª–∞—Å–∞ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω–¥—É–º',
            'VIEW_REFERENDUM': '–ü—Ä–µ–≥–ª–µ–¥–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω–¥—É–º',

            // ===== –ê–ù–ö–ï–¢–ò –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù –ò–ó–ë–û–† =====
            'CREATE_MULTI_POLL': '–°—ä–∑–¥–∞–¥–µ –∞–Ω–∫–µ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω –∏–∑–±–æ—Ä',
            'UPDATE_MULTI_POLL': '–†–µ–¥–∞–∫—Ç–∏—Ä–∞ –∞–Ω–∫–µ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω –∏–∑–±–æ—Ä',
            'DELETE_MULTI_POLL': '–ò–∑—Ç—Ä–∏ –∞–Ω–∫–µ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω –∏–∑–±–æ—Ä',
            'VOTE_MULTI_POLL': '–ì–ª–∞—Å—É–≤–∞ –≤ –∞–Ω–∫–µ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω –∏–∑–±–æ—Ä',
            'CHANGE_VOTE_MULTI_POLL': '–ü—Ä–æ–º–µ–Ω–∏ –≥–ª–∞—Å–∞ –≤ –∞–Ω–∫–µ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω –∏–∑–±–æ—Ä',
            'VIEW_MULTI_POLL': '–ü—Ä–µ–≥–ª–µ–¥–∞ –∞–Ω–∫–µ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω –∏–∑–±–æ—Ä',

            // ===== –°–ò–ì–ù–ê–õ–ò =====
            'CREATE_SIGNAL': '–ü–æ–¥–∞–¥–µ —Å–∏–≥–Ω–∞–ª',
            'UPDATE_SIGNAL': '–†–µ–¥–∞–∫—Ç–∏—Ä–∞ —Å–∏–≥–Ω–∞–ª',
            'DELETE_SIGNAL': '–ò–∑—Ç—Ä–∏ —Å–∏–≥–Ω–∞–ª',
            'VIEW_SIGNAL': '–ü—Ä–µ–≥–ª–µ–¥–∞ —Å–∏–≥–Ω–∞–ª',
            'RESOLVE_SIGNAL': '–†–µ—à–∏ —Å–∏–≥–Ω–∞–ª–∞',
            'ASSIGN_SIGNAL': '–ù–∞–∑–Ω–∞—á–∏ —Å–∏–≥–Ω–∞–ª–∞',

            // ===== –ö–û–ú–ï–ù–¢–ê–†–ò =====
            'CREATE_COMMENT': '–ö–æ–º–µ–Ω—Ç–∏—Ä–∞',
            'UPDATE_COMMENT': '–†–µ–¥–∞–∫—Ç–∏—Ä–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä',
            'DELETE_COMMENT': '–ò–∑—Ç—Ä–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä',
            'REPLY_COMMENT': '–û—Ç–≥–æ–≤–æ—Ä–∏ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä',

            // ===== –†–ï–ê–ö–¶–ò–ò =====
            'LIKE_CONTENT': '–•–∞—Ä–µ—Å–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ',
            'UNLIKE_CONTENT': '–ü—Ä–µ–º–∞—Ö–Ω–∞ —Ö–∞—Ä–µ—Å–≤–∞–Ω–µ',
            'DISLIKE_CONTENT': '–ù–µ —Ö–∞—Ä–µ—Å–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ',
            'REMOVE_DISLIKE': '–ü—Ä–µ–º–∞—Ö–Ω–∞ –Ω–µ—Ö–∞—Ä–µ—Å–≤–∞–Ω–µ',

            // ===== –ê–í–¢–ï–ù–¢–ò–ö–ê–¶–ò–Ø =====
            'LOGIN': '–í–ª–µ–∑–µ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞',
            'LOGOUT': '–ò–∑–ª–µ–∑–µ –æ—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∞',
            'REGISTER': '–†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞ —Å–µ',
            'FAILED_LOGIN': '–ù–µ—É—Å–ø–µ—à–µ–Ω –æ–ø–∏—Ç –∑–∞ –≤—Ö–æ–¥',
            'PASSWORD_RESET_REQUEST': '–ó–∞—è–≤–∏ —Å–º—è–Ω–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∞',
            'PASSWORD_RESET_COMPLETE': '–°–º–µ–Ω–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞',
            'EMAIL_VERIFICATION': '–ü–æ—Ç–≤—ä—Ä–¥–∏ –∏–º–µ–π–ª–∞',
            'RESEND_VERIFICATION': '–ò–∑–ø—Ä–∞—Ç–∏ –æ—Ç–Ω–æ–≤–æ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ',

            // ===== –ü–†–û–§–ò–õ =====
            'UPDATE_PROFILE': '–û–±–Ω–æ–≤–∏ –ø—Ä–æ—Ñ–∏–ª–∞',
            'CHANGE_AVATAR': '–°–º–µ–Ω–∏ —Å–Ω–∏–º–∫–∞—Ç–∞',
            'CHANGE_PASSWORD': '–°–º–µ–Ω–∏ –ø–∞—Ä–æ–ª–∞—Ç–∞',
            'UPDATE_EMAIL': '–°–º–µ–Ω–∏ –∏–º–µ–π–ª–∞',
            'DEACTIVATE_ACCOUNT': '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–∞',
            'REACTIVATE_ACCOUNT': '–ê–∫—Ç–∏–≤–∏—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–∞',

            // ===== –§–ê–ô–õ–û–í–ï =====
            'UPLOAD_IMAGE': '–ö–∞—á–∏ —Å–Ω–∏–º–∫–∞',
            'DELETE_IMAGE': '–ò–∑—Ç—Ä–∏ —Å–Ω–∏–º–∫–∞',
            'UPLOAD_DOCUMENT': '–ö–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç',
            'DELETE_DOCUMENT': '–ò–∑—Ç—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç',

            // ===== –ê–î–ú–ò–ù –î–ï–ô–°–¢–í–ò–Ø =====
            'ADMIN_LOGIN': '–ê–¥–º–∏–Ω –≤—Ö–æ–¥',
            'BAN_USER': '–ë–ª–æ–∫–∏—Ä–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',
            'UNBAN_USER': '–†–∞–∑–±–ª–æ–∫–∏—Ä–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',
            'DELETE_USER_CONTENT': '–ò–∑—Ç—Ä–∏ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',
            'MODERATE_CONTENT': '–ú–æ–¥–µ—Ä–∏—Ä–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ',
            'APPROVE_CONTENT': '–û–¥–æ–±—Ä–∏ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ',
            'REJECT_CONTENT': '–û—Ç—Ö–≤—ä—Ä–ª–∏ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ',
            'WARN_USER': '–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',
            'PROMOTE_USER': '–ü–æ–≤–∏—à–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',
            'DEMOTE_USER': '–ü–æ–Ω–∏–∂–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',

            // ===== –ù–ê–í–ò–ì–ê–¶–ò–Ø =====
            'SEARCH_CONTENT': '–¢—ä—Ä—Å–∏ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ',
            'VIEW_HOMEPAGE': '–ü–æ—Å–µ—Ç–∏ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
            'VIEW_PROFILE': '–ü—Ä–µ–≥–ª–µ–¥–∞ –ø—Ä–æ—Ñ–∏–ª',
            'VIEW_ADMIN_DASHBOARD': '–û—Ç–≤–æ—Ä–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∞',

            // ===== –°–ò–°–¢–ï–ú–ù–ò =====
            'SYSTEM_BACKUP': '–°–∏—Å—Ç–µ–º–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ –∫–æ–ø–∏–µ',
            'SYSTEM_MAINTENANCE': '–°–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞',
            'DATABASE_CLEANUP': '–ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏',
            'CACHE_CLEAR': '–ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∫–µ—à–∞',
            'EMAIL_SENT': '–ò–∑–ø—Ä–∞—Ç–∏ –∏–º–µ–π–ª',
            'EMAIL_FAILED': '–ù–µ—É—Å–ø–µ—à–µ–Ω –∏–º–µ–π–ª',

            // ===== –°–ò–ì–£–†–ù–û–°–¢ =====
            'SUSPICIOUS_ACTIVITY': '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç',
            'BLOCKED_REQUEST': '–ë–ª–æ–∫–∏—Ä–∞–Ω–∞ –∑–∞—è–≤–∫–∞',
            'CSRF_ATTACK_BLOCKED': '–ë–ª–æ–∫–∏—Ä–∞–Ω–∞ CSRF –∞—Ç–∞–∫–∞',
            'SPAM_DETECTED': '–û—Ç–∫—Ä–∏—Ç —Å–ø–∞–º',
            'BOT_DETECTED': '–û—Ç–∫—Ä–∏—Ç –±–æ—Ç',

            // ===== –î–†–£–ì–ò =====
            'EXPORT_DATA': '–ï–∫—Å–ø–æ—Ä—Ç –Ω–∞ –¥–∞–Ω–Ω–∏',
            'IMPORT_DATA': '–ò–º–ø–æ—Ä—Ç –Ω–∞ –¥–∞–Ω–Ω–∏',
            'GENERATE_REPORT': '–ì–µ–Ω–µ—Ä–∏—Ä–∞ –æ—Ç—á–µ—Ç',
            'SCHEDULE_TASK': '–ü–ª–∞–Ω–∏—Ä–∞ –∑–∞–¥–∞—á–∞',
            'COMPLETE_TASK': '–ó–∞–≤—ä—Ä—à–∏ –∑–∞–¥–∞—á–∞'
        };

        const actionText = actionMap[action] || action;
        const actionType = this.getActionType(action);

        return `<span class="action-badge ${actionType}">${actionText}</span>`;
    }

    formatEntity(activity) {
        if (!activity.entityType) return '--';

        const typeMap = {
            'PUBLICATION': 'üìÑ –ü—É–±–ª–∏–∫–∞—Ü–∏—è',
            'SIMPLEEVENT': 'üé™ –û–ø—Ä–æ—Å—Ç–µ–Ω –≤–∏–¥ —Å—ä–±–∏—Ç–∏–µ',
            'REFERENDUM': 'üó≥Ô∏è –†–µ—Ñ–µ—Ä–µ–Ω–¥—É–º',
            'MULTI_POLL': 'üìä –ê–Ω–∫–µ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω –∏–∑–±–æ—Ä',
            'SIGNAL': 'üö® –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏ —Å–∏–≥–Ω–∞–ª',
            'COMMENT': 'üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä',
            'USER': 'üë§ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',
            'SYSTEM': '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è',
            'OTHER': 'üìã –î—Ä—É–≥–æ'
        };

        const typeText = typeMap[activity.entityType] || activity.entityType;

        return `
            <div class="entity-info">
                <div class="entity-type">${typeText}</div>
                ${activity.entityId ? `<div class="entity-id">#${activity.entityId}</div>` : ''}
            </div>
        `;
    }

    getActionType(action) {
        if (action.includes('CREATE')) return 'create';
        if (action.includes('UPDATE') || action.includes('CHANGE')) return 'update';
        if (action.includes('DELETE') || action.includes('BAN')) return 'delete';
        if (action.includes('LOGIN') || action.includes('LOGOUT') || action.includes('REGISTER') || action.includes('VERIFICATION')) return 'auth';
        if (action.includes('VOTE') || action.includes('LIKE') || action.includes('COMMENT')) return 'interact';
        if (action.includes('MODERATE') || action.includes('APPROVE') || action.includes('REJECT') || action.includes('WARN')) return 'moderate';
        return 'other';
    }

    // ===== STATISTICS =====

    updateStats() {
        const totalCount = document.getElementById('total-activities-count');
        const filteredCount = document.getElementById('filtered-activities-count');
        const activeUsersCount = document.getElementById('active-users-count');
        const lastUpdateTime = document.getElementById('last-update-time');

        if (totalCount) totalCount.textContent = this.activities.length;
        if (filteredCount) filteredCount.textContent = this.filteredActivities.length;
        if (activeUsersCount) activeUsersCount.textContent = this.getActiveUsersCount();
        if (lastUpdateTime) lastUpdateTime.textContent = new Date().toLocaleTimeString('bg-BG');
    }

    getActiveUsersCount() {
        const uniqueUsers = new Set();
        const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);

        this.activities.forEach(activity => {
            if (new Date(activity.timestamp) > oneDayAgo && activity.userId) {
                uniqueUsers.add(activity.userId);
            }
        });

        return uniqueUsers.size;
    }

    // ===== OTHER ACTIONS =====

    clearActivities() {
        if (confirm('–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—á–∏—Å—Ç–∏—Ç–µ –≤—Å–∏—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?')) {
            this.activities = [];
            this.filteredActivities = [];
            this.currentPage = 0;
            this.renderActivities();
            this.updateStats();
            this.updatePaginationUI();
            this.showToast('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏—Ç–µ —Å–∞ –∏–∑—á–∏—Å—Ç–µ–Ω–∏', 'success');
        }
    }

    resetFilters() {
        // Reset filter values
        this.filters = {
            timeRange: 'all',
            user: '',
            ip: '',
            action: '',
            entityType: '',
            dateStart: null,
            dateEnd: null
        };

        // Reset UI
        const userInput = document.getElementById('user-search-input');
        const ipInput = document.getElementById('ip-search-input');
        const actionSelect = document.getElementById('action-filter-select');
        const entitySelect = document.getElementById('entity-filter-select');
        const dateStart = document.getElementById('date-start-input');
        const dateEnd = document.getElementById('date-end-input');

        if (userInput) userInput.value = '';
        if (ipInput) ipInput.value = '';
        if (actionSelect) actionSelect.value = '';
        if (entitySelect) entitySelect.value = '';
        if (dateStart) dateStart.value = '';
        if (dateEnd) dateEnd.value = '';

        // Reset time buttons
        document.querySelectorAll('.time-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.range === 'all') {
                btn.classList.add('active');
            }
        });

        // Hide custom date range
        const customDateRange = document.getElementById('custom-date-range');
        if (customDateRange) {
            customDateRange.style.display = 'none';
        }

        // Hide clear buttons
        const clearButtons = document.querySelectorAll('.clear-filter-btn');
        clearButtons.forEach(btn => btn.style.display = 'none');

        this.applyFilters();
        this.showToast('–§–∏–ª—Ç—Ä–∏—Ç–µ —Å–∞ –Ω—É–ª–∏—Ä–∞–Ω–∏', 'info');
    }

    async exportActivities() {
        try {
            const dataToExport = {
                activities: this.filteredActivities,
                filters: this.filters,
                exportDate: new Date().toISOString(),
                totalCount: this.activities.length,
                filteredCount: this.filteredActivities.length
            };

            const blob = new Blob([JSON.stringify(dataToExport, null, 2)], {
                type: 'application/json'
            });

            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `activity-log-${new Date().toISOString().split('T')[0]}.json`;
            a.click();

            URL.revokeObjectURL(url);
            this.showToast('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏—Ç–µ —Å–∞ –µ–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏', 'success');

        } catch (error) {
            console.error('‚ùå Export error:', error);
            this.showToast('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ—Ç–æ', 'error');
        }
    }

    showActivityDetails(activityId) {
        const activity = this.activities.find(a => a.id == activityId);
        if (!activity) {
            this.showToast('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞', 'error');
            return;
        }

        // Populate modal fields
        document.getElementById('modal-activity-id').textContent = activity.id;
        document.getElementById('modal-activity-timestamp').textContent = new Date(activity.timestamp).toLocaleString('bg-BG');
        document.getElementById('modal-activity-username').textContent = activity.username || '–ê–Ω–æ–Ω–∏–º–µ–Ω';
        document.getElementById('modal-activity-action').textContent = this.formatAction(activity.action);
        document.getElementById('modal-activity-entity-type').textContent = activity.entityType || 'N/A';
        document.getElementById('modal-activity-entity-id').textContent = activity.entityId || 'N/A';
        document.getElementById('modal-activity-ip').textContent = activity.ipAddress || 'N/A';
        document.getElementById('modal-activity-user-agent').textContent = activity.userAgent || 'N/A';
        document.getElementById('modal-activity-details').textContent = activity.details || '–ù—è–º–∞ –¥–µ—Ç–∞–π–ª–∏';

        // Show modal
        try {
            const modal = new bootstrap.Modal(document.getElementById('activity-details-modal'));
            modal.show();
        } catch (error) {
            console.error('‚ùå Error showing modal:', error);
            this.showToast('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ –¥–µ—Ç–∞–π–ª–∏—Ç–µ', 'error');
        }
    }

    // ===== üî• –ù–û–í–ò NOTIFICATION –ú–ï–¢–û–î–ò =====

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ callback –∑–∞ –¥—Ä—É–≥–∏ –º–æ–¥—É–ª–∏
    registerUpdateCallback(callback) {
        if (typeof callback === 'function') {
            this.updateCallbacks.push(callback);
        }
    }

    // –£–≤–µ–¥–æ–º—è–≤–∞–Ω–µ –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    notifyInitialized() {
        this.updateCallbacks.forEach(callback => {
            try {
                callback('initialized', { activities: this.activities });
            } catch (error) {
                console.error('‚ùå Error in update callback:', error);
            }
        });
    }

    // –£–≤–µ–¥–æ–º—è–≤–∞–Ω–µ –∑–∞ –ø—Ä–æ–º—è–Ω–∞ –≤ —Ñ–∏–ª—Ç—Ä–∏—Ç–µ
    notifyFiltersChanged() {
        this.updateCallbacks.forEach(callback => {
            try {
                callback('filters_changed', {
                    filteredActivities: this.filteredActivities,
                    filters: this.filters
                });
            } catch (error) {
                console.error('‚ùå Error in filter callback:', error);
            }
        });
    }

    // –£–≤–µ–¥–æ–º—è–≤–∞–Ω–µ –∑–∞ –Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
    notifyActivityAdded(activity) {
        this.updateCallbacks.forEach(callback => {
            try {
                callback('activity_added', {
                    activity: activity,
                    filteredActivities: this.filteredActivities
                });
            } catch (error) {
                console.error('‚ùå Error in activity callback:', error);
            }
        });
    }

    // ===== UTILITY FUNCTIONS =====

    showLoading() {
        const tableBody = document.getElementById('activity-table-body');
        if (tableBody) {
            tableBody.innerHTML = `
                <tr id="loading-row">
                    <td colspan="6" class="loading-cell">
                        <div class="loading-content">
                            <div class="loading-spinner"></div>
                            <span>–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...</span>
                        </div>
                    </td>
                </tr>
            `;
        }
    }

    showError(message) {
        const tableBody = document.getElementById('activity-table-body');
        if (tableBody) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center text-danger p-4">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        ${message}
                    </td>
                </tr>
            `;
        }
    }

    showToast(message, type = 'info') {
        if (window.ActivityWallUtils && window.ActivityWallUtils.showToast) {
            window.ActivityWallUtils.showToast(message, type);
        } else if (window.showToast) {
            window.showToast(message, type);
        } else {
            console.log(`[${type.toUpperCase()}] ${message}`);
        }
    }

    toggleClearButton(clearButton, value) {
        if (clearButton) {
            clearButton.style.display = value ? 'block' : 'none';
        }
    }

    getCsrfToken() {
        return document.querySelector('meta[name="_csrf"]')?.getAttribute('content') || '';
    }

    // ===== CLEANUP =====

    cleanup() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
        }

        if (this.connectionTimeout) {
            clearTimeout(this.connectionTimeout);
            this.connectionTimeout = null;
        }

        if (this.websocket) {
            this.websocket.close();
            this.websocket = null;
        }
    }

    destroy() {
        this.cleanup();
        this.updateCallbacks = [];
    }
}


// ===== GLOBAL INITIALIZATION =====

let activityWallInstance = null;

document.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('activity-wall')) {
        activityWallInstance = new ActivityWall();
        window.activityWallInstance = activityWallInstance;
    }
});

window.addEventListener('beforeunload', function() {
    if (activityWallInstance) {
        activityWallInstance.destroy();
    }
});

// Export for global access
window.ActivityWall = ActivityWall;
window.activityWallInstance = activityWallInstance;