// ===== SIGNAL API CLIENT =====
// HTTP –∫–ª–∏–µ–Ω—Ç –∑–∞ –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—è —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞ –∑–∞ —Å–∏–≥–Ω–∞–ª–∏—Ç–µ

// ===== API CONFIGURATION =====
const API_CONFIG = {
    baseURL: '/signals',
    timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥–∏
    retryAttempts: 3,
    retryDelay: 1000 // 1 —Å–µ–∫—É–Ω–¥–∞
};

// ===== HTTP CLIENT UTILITIES =====
class HTTPClient {
    static async request(url, options = {}) {
        const defaultOptions = {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            },
            credentials: 'same-origin',
            ...options
        };

        // –ó–∞–¥–∞–≤–∞–º–µ Content-Type —Å–∞–º–æ –∞–∫–æ –Ω–µ –µ FormData
        if (!(options.body instanceof FormData)) {
            defaultOptions.headers['Content-Type'] = 'application/json';
        }

        // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ CSRF token –∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        const csrfToken = document.querySelector('meta[name="_csrf"]')?.getAttribute('content');
        const csrfHeader = document.querySelector('meta[name="_csrf_header"]')?.getAttribute('content');

        if (csrfToken && csrfHeader) {
            defaultOptions.headers[csrfHeader] = csrfToken;
        }

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);

            const response = await fetch(url, {
                ...defaultOptions,
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                throw new APIError(
                    `HTTP ${response.status}: ${response.statusText}`,
                    response.status,
                    await response.text()
                );
            }

            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                return await response.json();
            }

            return await response.text();

        } catch (error) {
            if (error.name === 'AbortError') {
                throw new APIError('–ó–∞—è–≤–∫–∞—Ç–∞ –±–µ—à–µ –ø—Ä–µ–∫—ä—Å–Ω–∞—Ç–∞ –ø–æ—Ä–∞–¥–∏ timeout', 408);
            }
            throw error;
        }
    }

    static async retryRequest(url, options, maxRetries = API_CONFIG.retryAttempts) {
        let lastError;

        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                return await this.request(url, options);
            } catch (error) {
                lastError = error;

                // –ù–µ –ø—Ä–∞–≤–∏–º retry –ø—Ä–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏ –≥—Ä–µ—à–∫–∏ (4xx)
                if (error instanceof APIError && error.status >= 400 && error.status < 500) {
                    throw error;
                }

                // –ü–æ—Å–ª–µ–¥–µ–Ω –æ–ø–∏—Ç - —Ö–≤—ä—Ä–ª—è–º–µ –≥—Ä–µ—à–∫–∞—Ç–∞
                if (attempt === maxRetries) {
                    throw error;
                }

                // –ò–∑—á–∞–∫–≤–∞–º–µ –ø—Ä–µ–¥–∏ —Å–ª–µ–¥–≤–∞—â–∏—è –æ–ø–∏—Ç
                await new Promise(resolve => setTimeout(resolve, API_CONFIG.retryDelay * attempt));
                console.warn(`API retry ${attempt}/${maxRetries} –∑–∞ ${url}:`, error.message);
            }
        }

        throw lastError;
    }
}

// ===== CUSTOM ERROR CLASS =====
class APIError extends Error {
    constructor(message, status = 500, details = null) {
        super(message);
        this.name = 'APIError';
        this.status = status;
        this.details = details;
    }

    getUserFriendlyMessage() {
        switch (this.status) {
            case 400:
                return '–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏. –ú–æ–ª—è –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –≤—ä–≤–µ–¥–µ–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.';
            case 401:
                return '–ú–æ–ª—è –≤–ª–µ–∑—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏ –∑–∞ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ.';
            case 403:
                return '–ù—è–º–∞—Ç–µ –ø—Ä–∞–≤–∞ –∑–∞ —Ç–∞–∑–∏ –æ–ø–µ—Ä–∞—Ü–∏—è.';
            case 404:
                return '–¢—ä—Ä—Å–µ–Ω–∏—è—Ç —Ä–µ—Å—É—Ä—Å –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.';
            case 408:
                return '–ó–∞—è–≤–∫–∞—Ç–∞ –æ—Ç–Ω–µ —Ç–≤—ä—Ä–¥–µ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.';
            case 409:
                return '–í—ä–∑–Ω–∏–∫–Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –í—ä–∑–º–æ–∂–Ω–æ –µ –¥–∞–Ω–Ω–∏—Ç–µ –¥–∞ —Å–∞ –ø—Ä–æ–º–µ–Ω–µ–Ω–∏ –æ—Ç –¥—Ä—É–≥ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª.';
            case 429:
                return '–¢–≤—ä—Ä–¥–µ –º–Ω–æ–≥–æ –∑–∞—è–≤–∫–∏. –ú–æ–ª—è –∏–∑—á–∞–∫–∞–π—Ç–µ –º–∞–ª–∫–æ.';
            case 500:
                return '–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ —Å—ä—Ä–≤—ä—Ä–∞. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ –ø–æ-–∫—ä—Å–Ω–æ.';
            case 503:
                return '–£—Å–ª—É–≥–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–Ω–∞. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.';
            default:
                return '–í—ä–∑–Ω–∏–∫–Ω–∞ –Ω–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞. –ú–æ–ª—è –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.';
        }
    }
}

// ===== MAIN SIGNAL API CLASS =====
class SignalAPI {

    // ===== GET ALL SIGNALS =====
    static async getAllSignals(filters = {}) {
        try {
            console.log('üîÑ Loading signals with filters:', filters);

            // –ò–∑–≥—Ä–∞–∂–¥–∞–Ω–µ –Ω–∞ query string
            const queryParams = new URLSearchParams();

            if (filters.category && filters.category !== 'all') {
                queryParams.append('category', filters.category);
            }

            if (filters.urgency && filters.urgency !== 'all') {
                queryParams.append('urgency', filters.urgency);
            }

            if (filters.search && filters.search.trim()) {
                queryParams.append('search', filters.search.trim());
            }

            if (filters.sort) {
                queryParams.append('sort', filters.sort);
            }

            // –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–∞–∫–æ —Å–µ –¥–æ–±–∞–≤–∏ –≤ –±—ä–¥–µ—â–µ)
            if (filters.page !== undefined) {
                queryParams.append('page', filters.page);
            }

            if (filters.size !== undefined) {
                queryParams.append('size', filters.size);
            }

            const url = `${API_CONFIG.baseURL}${queryParams.toString() ? '?' + queryParams.toString() : ''}`;
            const response = await HTTPClient.retryRequest(url);

            console.log('‚úÖ Signals loaded successfully:', response.length || 0);
            return response;

        } catch (error) {
            console.error('‚ùå Error loading signals:', error);
            throw new APIError(
                `–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª–∏—Ç–µ: ${error.message}`,
                error.status || 500
            );
        }
    }

    // ===== GET SIGNAL BY ID =====
    static async getSignalById(id) {
        try {
            console.log('üîÑ Loading signal details for ID:', id);

            const url = `${API_CONFIG.baseURL}/${id}`;
            const response = await HTTPClient.retryRequest(url);

            console.log('‚úÖ Signal details loaded successfully');
            return response;

        } catch (error) {
            console.error('‚ùå Error loading signal details:', error);
            throw new APIError(
                `–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–µ—Ç–∞–π–ª–∏—Ç–µ: ${error.message}`,
                error.status || 500
            );
        }
    }

    // ===== CREATE NEW SIGNAL =====
    static async createSignal(signalData) {
        try {
            console.log('üîÑ Creating new signal:', signalData);

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
            this.validateSignalData(signalData);

            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ
            const payload = this.prepareSignalPayload(signalData);

            // Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ FormData
            console.log('üì¶ FormData contents:');
            for (let [key, value] of payload.entries()) {
                if (value instanceof File) {
                    console.log(`  ${key}: File(${value.name}, ${value.size} bytes, ${value.type})`);
                } else {
                    console.log(`  ${key}: ${value}`);
                }
            }

            console.log('üåê Sending request to:', API_CONFIG.baseURL);
            const startTime = Date.now();

            // –°–ø–µ—Ü–∏–∞–ª–Ω–∏ –æ–ø—Ü–∏–∏ –∑–∞ FormData
            const response = await HTTPClient.retryRequest(API_CONFIG.baseURL, {
                method: 'POST',
                body: payload,
                headers: {
                    // –ù–ï –∑–∞–¥–∞–≤–∞–º–µ Content-Type –∑–∞ FormData - –±—Ä–∞—É–∑—ä—Ä—ä—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —â–µ –≥–æ –∑–∞–¥–∞–¥–µ
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            const endTime = Date.now();
            console.log(`‚úÖ Signal created successfully in ${endTime - startTime}ms:`, response);
            return response;

        } catch (error) {
            console.error('‚ùå Error creating signal:', error);
            throw new APIError(
                `–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª–∞: ${error.message}`,
                error.status || 500
            );
        }
    }

    // ===== UPDATE SIGNAL =====
    static async updateSignal(id, signalData) {
        try {
            console.log('üîÑ Updating signal:', id, signalData);

            this.validateSignalData(signalData);
            const payload = this.prepareSignalPayload(signalData);

            const url = `${API_CONFIG.baseURL}/${id}`;
            const response = await HTTPClient.retryRequest(url, {
                method: 'PUT',
                body: payload
            });

            console.log('‚úÖ Signal updated successfully');
            return response;

        } catch (error) {
            console.error('‚ùå Error updating signal:', error);
            throw new APIError(
                `–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª–∞: ${error.message}`,
                error.status || 500
            );
        }
    }

    // ===== DELETE SIGNAL =====
    static async deleteSignal(id) {
        try {
            console.log('üîÑ Deleting signal:', id);

            const url = `${API_CONFIG.baseURL}/${id}`;
            const response = await HTTPClient.retryRequest(url, {
                method: 'DELETE'
            });

            console.log('‚úÖ Signal deleted successfully');
            return response;

        } catch (error) {
            console.error('‚ùå Error deleting signal:', error);
            throw new APIError(
                `–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Å–∏–≥–Ω–∞–ª–∞: ${error.message}`,
                error.status || 500
            );
        }
    }

    // ===== VALIDATION HELPERS =====
    static validateSignalData(data) {
        const errors = [];

        if (!data.title || data.title.trim().length < 5) {
            errors.push('–ó–∞–≥–ª–∞–≤–∏–µ—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 5 —Å–∏–º–≤–æ–ª–∞');
        }

        if (!data.description || data.description.trim().length < 10) {
            errors.push('–û–ø–∏—Å–∞–Ω–∏–µ—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 10 —Å–∏–º–≤–æ–ª–∞');
        }

        if (!data.category) {
            errors.push('–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∞');
        }

        if (!data.urgency) {
            errors.push('–°–ø–µ—à–Ω–æ—Å—Ç—Ç–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∞');
        }

        if (!data.latitude || !data.longitude) {
            errors.push('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ');
        }

        if (errors.length > 0) {
            throw new APIError('–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∏ –≥—Ä–µ—à–∫–∏: ' + errors.join(', '), 400);
        }
    }

    static prepareSignalPayload(data) {

        const formData = new FormData();

        formData.append('title', data.title.trim());
        formData.append('description', data.description.trim());
        formData.append('category', data.category);
        formData.append('urgency', data.urgency);
        formData.append('latitude', data.latitude.toString());
        formData.append('longitude', data.longitude.toString());

        // –î–æ–±–∞–≤–∏ —Å–Ω–∏–º–∫–∞ –∞–∫–æ –∏–º–∞
        if (data.image && data.image instanceof File) {
            formData.append('image', data.image);
        }

        return formData;
    }

    // ===== INCREMENT VIEWS =====
    static async incrementViews(signalId) {
        try {
            console.log('üîÑ Incrementing views for signal:', signalId);

            // –ü—Ä–∞–≤–∏–º GET –∑–∞—è–≤–∫–∞ –∫—ä–º —Å–∏–≥–Ω–∞–ª–∞ - —Ç–æ–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —É–≤–µ–ª–∏—á–∞–≤–∞ views –≤ backend-–∞
            const url = `${API_CONFIG.baseURL}/${signalId}`;
            const response = await HTTPClient.retryRequest(url);

            console.log('‚úÖ Views incremented, updated signal data:', response);
            return response; // –í—Ä—ä—â–∞–º–µ –æ–±–Ω–æ–≤–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏

        } catch (error) {
            console.error('‚ùå Error incrementing views:', error);
            // –ù–µ —Ö–≤—ä—Ä–ª—è–º–µ –≥—Ä–µ—à–∫–∞ - views increment-—ä—Ç –Ω–µ —Ç—Ä—è–±–≤–∞ –¥–∞ –±–ª–æ–∫–∏—Ä–∞ UI-—Ç–æ
            return null;
        }
    }
}



// ===== GLOBAL API UTILITIES =====
window.SignalAPI = SignalAPI;
window.APIError = APIError;

// ===== ERROR HANDLER HELPER =====
window.handleAPIError = function(error, context = 'Operation') {
    console.error(`API Error in ${context}:`, error);

    let message = '–í—ä–∑–Ω–∏–∫–Ω–∞ –Ω–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞';

    if (error instanceof APIError) {
        message = error.getUserFriendlyMessage();
    } else if (error.message) {
        message = error.message;
    }

    // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∞—Ç–∞ —á—Ä–µ–∑ notification system
    if (window.mapCore && window.mapCore.showNotification) {
        window.mapCore.showNotification(message, 'error');
    } else {
        alert(message);
    }

    return message;
};

// ===== LOADING STATE HELPERS =====
window.APILoadingState = {
    isLoading: false,

    setLoading(loading, message = '–ó–∞—Ä–µ–∂–¥–∞–Ω–µ...') {
        this.isLoading = loading;

        // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ loading –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if (window.mapCore && window.mapCore.showLoading) {
            window.mapCore.showLoading(loading, message);
        }

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∏—Ç–µ –ø–æ –≤—Ä–µ–º–µ –Ω–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
        const forms = document.querySelectorAll('form');
        forms.forEach(form => {
            const inputs = form.querySelectorAll('input, select, textarea, button');
            inputs.forEach(input => {
                input.disabled = loading;
            });
        });
    }
};



// Export –∑–∞ modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { SignalAPI, APIError, HTTPClient };
}

console.log('üåê Signal API Client loaded successfully');