// ===== SMOLYAN MAP - MAIN COORDINATOR =====

// ===== GLOBAL VARIABLES =====
let panelsExpanded = {
    newSignal: false,
    signals: false
};

// ===== INITIALIZATION =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üó∫Ô∏è SmolyanVote Map initializing...');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏ –µ–ª–µ–º–µ–Ω—Ç–∏
    if (!document.getElementById('map')) {
        console.error('Map container not found!');
        return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–∞–≤–∏–ª–Ω–∏—è —Ä–µ–¥
    initializeInSequence();
});

async function initializeInSequence() {
    try {
        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ –∫–∞—Ä—Ç–∞
        console.log('üìç Initializing map core...');
        if (window.mapCore) {
            window.mapCore.initializeMap();
            window.mapCore.initializeMapControls();
        }

        // 2. –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ —Å–∏–≥–Ω–∞–ª–∏—Ç–µ
        console.log('üìä Loading signals data...');
        if (window.signalManagement) {
            await window.signalManagement.loadSignalsData();
        }

        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ –∏ event listeners
        console.log('üîç Initializing search and interactions...');
        if (window.signalManagement) {
            window.signalManagement.initializeSearch();
            window.signalManagement.initializeSignalEventListeners();
        }

        // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ tooltip —Å–∏—Å—Ç–µ–º–∞—Ç–∞
        console.log('üí¨ Initializing tooltips...');
        if (window.signalTooltip) {
            window.signalTooltip.initialize();
        }

        // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–∞–Ω–µ–ª–∏—Ç–µ
        console.log('üéõÔ∏è Initializing panels...');
        initializePanels();

        // 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Ñ–∏–ª—Ç—Ä–∏—Ç–µ –¥–∞ —Å–∞ —Å–≤–∏—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ—Ç–æ
        setupInitialFilterState();

        // 7. Mobile –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        if (window.mapCore && window.mapCore.isMobile()) {
            adaptForMobile();
        }

        console.log('‚úÖ SmolyanVote Map initialized successfully!');

    } catch (error) {
        console.error('‚ùå Error during map initialization:', error);

        // Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≥—Ä–µ—à–∫–∞
        setTimeout(() => {
            if (window.mapCore) {
                window.mapCore.initializeMap();
            }
        }, 1000);
    }
}

// ===== PANELS MANAGEMENT =====
function initializePanels() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –≤—Å–∏—á–∫–∏ –ø–∞–Ω–µ–ª–∏ –≤ –∑–∞—Ç–≤–æ—Ä–µ–Ω–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ
    const panels = ['newSignal', 'signals'];

    panels.forEach(panelId => {
        const panel = document.getElementById(panelId + 'Panel');
        if (panel) {
            panel.classList.remove('active');
            panelsExpanded[panelId] = false;
        }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ signals –ø–∞–Ω–µ–ª–∞ –¥–∞ –µ —Å–≤–∏—Ç –≤ –Ω–∞—á–∞–ª–æ—Ç–æ
    const signalsPanel = document.getElementById('signalsPanel');
    if (signalsPanel) {
        signalsPanel.classList.remove('expanded');
    }
}

function togglePanel(panelId) {
    const panel = document.getElementById(panelId + 'Panel');
    const isExpanded = panelsExpanded[panelId];

    if (panel) {
        if (isExpanded) {
            // –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –ø–∞–Ω–µ–ª–∞
            panel.classList.remove('active');
            panelsExpanded[panelId] = false;

            // –°–ø–µ—Ü–∏–∞–ª–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ location selection –ø—Ä–∏ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ newSignal –ø–∞–Ω–µ–ª–∞
            if (panelId === 'newSignal') {
                resetLocationSelection();
            }
        } else {
            // –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –¥—Ä—É–≥–∏ –ø–∞–Ω–µ–ª–∏
            Object.keys(panelsExpanded).forEach(id => {
                if (id !== panelId && panelsExpanded[id]) {
                    closePanel(id);
                }
            });

            // –û—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–∏—è –ø–∞–Ω–µ–ª
            panel.classList.add('active');
            panelsExpanded[panelId] = true;
        }

        // –ü—Ä–µ–æ—Ä–∞–∑–º–µ—Ä—è–≤–∞–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞ —Å–ª–µ–¥ –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞
        setTimeout(() => {
            if (window.mapCore) {
                window.mapCore.handleResize();
            }
        }, 400);
    }
}

function closePanel(panelId) {
    const panel = document.getElementById(panelId + 'Panel');

    if (panel) {
        panel.classList.remove('active');
        panelsExpanded[panelId] = false;

        // –°–ø–µ—Ü–∏–∞–ª–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ –ø–∞–Ω–µ–ª–∏
        if (panelId === 'newSignal') {
            resetLocationSelection();
        }

        // –ü—Ä–µ–æ—Ä–∞–∑–º–µ—Ä—è–≤–∞–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞
        setTimeout(() => {
            if (window.mapCore) {
                window.mapCore.handleResize();
            }
        }, 400);
    }
}

function resetLocationSelection() {
    // –†–µ–∑–µ—Ç –Ω–∞ location selection —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
    const btn = document.getElementById('selectLocationBtn');
    if (btn) {
        btn.innerHTML = '<i class="bi bi-geo-alt"></i> <span>–ò–∑–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</span>';
        btn.classList.remove('selecting', 'selected');
    }

    // –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏—Ç–µ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
    const latInput = document.getElementById('signalLatitude');
    const lngInput = document.getElementById('signalLongitude');
    if (latInput) latInput.value = '';
    if (lngInput) lngInput.value = '';
}

// ===== SIGNALS PANEL MANAGEMENT =====
function toggleSignalsPanel() {
    const signalsPanel = document.getElementById('signalsPanel');
    const arrow = document.getElementById('signalsTabArrow');

    if (!signalsPanel || !arrow) return;

    const isExpanded = signalsPanel.classList.contains('expanded');

    if (isExpanded) {
        signalsPanel.classList.remove('expanded');
        arrow.style.transform = 'translateY(-50%) rotate(0deg)';
    } else {
        signalsPanel.classList.add('expanded');
        arrow.style.transform = 'translateY(-50%) rotate(180deg)';
    }

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞ —Å–ª–µ–¥ –∞–Ω–∏–º–∞—Ü–∏—è
    setTimeout(() => {
        if (window.mapCore) {
            const map = window.mapCore.getMap();
            if (map) map.invalidateSize();
        }
    }, 400);
}

// ===== FILTERS MANAGEMENT =====
function toggleFilters() {
    const filtersContent = document.getElementById('filtersContent');
    const arrow = document.getElementById('filtersArrow');

    if (!filtersContent || !arrow) return;

    const isExpanded = filtersContent.classList.contains('expanded');

    if (isExpanded) {
        filtersContent.classList.remove('expanded');
        filtersContent.classList.add('collapsed');
        arrow.style.transform = 'rotate(0deg)';
    } else {
        filtersContent.classList.add('expanded');
        filtersContent.classList.remove('collapsed');
        arrow.style.transform = 'rotate(180deg)';
    }
}

function setupInitialFilterState() {
    const filtersContent = document.getElementById('filtersContent');
    const filtersArrow = document.getElementById('filtersArrow');

    if (filtersContent && filtersArrow) {
        filtersContent.classList.add('collapsed');
        filtersArrow.style.transform = 'rotate(0deg)';
    }
}

// ===== MOBILE ADAPTATIONS =====
function adaptForMobile() {
    console.log('üì± Adapting for mobile...');

    const signalsPanel = document.getElementById('signalsPanel');
    const leftControls = document.querySelector('.left-controls');

    if (signalsPanel) {
        signalsPanel.classList.add('mobile');
    }
    if (leftControls) {
        leftControls.classList.add('mobile');
    }

    // –°–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ tooltip —Å–∏—Å—Ç–µ–º–∞—Ç–∞ –Ω–∞ mobile
    if (window.signalTooltip) {
        window.signalTooltip.destroy();
    }
}

// ===== RESIZE HANDLING =====
function handleResize() {
    const isMobile = window.innerWidth <= 768;

    if (isMobile) {
        adaptForMobile();
    } else {
        // Desktop –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        const signalsPanel = document.getElementById('signalsPanel');
        const leftControls = document.querySelector('.left-controls');

        if (signalsPanel) {
            signalsPanel.classList.remove('mobile');
        }
        if (leftControls) {
            leftControls.classList.remove('mobile');
        }

        // –ü—É—Å–∫–∞–Ω–µ –Ω–∞ tooltip —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ desktop
        if (window.signalTooltip && !document.querySelector('.signal-tooltip')) {
            window.signalTooltip.initialize();
        }
    }

    // –î–µ–ª–µ–≥–∏—Ä–∞–Ω–µ –∫—ä–º mapCore
    if (window.mapCore) {
        window.mapCore.handleResize();
    }
}

// ===== ERROR HANDLING =====
function handleError(error, context = 'Unknown') {
    console.error(`Map Error in ${context}:`, error);

    if (window.mapCore) {
        window.mapCore.showNotification(`–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞: ${error.message}`, 'error');
    }
}

// ===== EVENT LISTENERS =====
window.addEventListener('resize', handleResize);

// –ì–ª–æ–±–∞–ª–Ω–∏ error handlers
window.addEventListener('error', (e) => {
    if (e.filename && e.filename.includes('map')) {
        handleError(e.error, 'Global');
    }
});

window.addEventListener('unhandledrejection', (e) => {
    if (e.reason && e.reason.message && e.reason.message.includes('map')) {
        handleError(e.reason, 'Promise');
    }
});

// ===== PUBLIC API =====
window.togglePanel = togglePanel;
window.closePanel = closePanel;
window.toggleSignalsPanel = toggleSignalsPanel;
window.toggleFilters = toggleFilters;

// –ì–ª–æ–±–∞–ª–µ–Ω debug –æ–±–µ–∫—Ç
window.SmolyanMapDebug = {
    currentSignals: () => window.signalManagement ? window.signalManagement.getCurrentSignals() : [],
    activeFilters: () => window.signalManagement ? window.signalManagement.getActiveFilters() : {},
    panelsState: () => panelsExpanded,
    mapInstance: () => window.mapCore ? window.mapCore.getMap() : null,
    reinitialize: initializeInSequence
};

// ===== PANEL CONTROL FUNCTIONS =====

function openPanel(panelName) {
    const panel = document.getElementById(panelName + 'Panel');
    if (panel) {
        // –ó–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –¥—Ä—É–≥–∏ –ø–∞–Ω–µ–ª–∏
        Object.keys(panelsExpanded).forEach(key => {
            if (key !== panelName && panelsExpanded[key]) {
                closePanel(key);
            }
        });

        panel.classList.add('active');
        panelsExpanded[panelName] = true;
    }
}

// Export –∑–∞ modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        togglePanel,
        closePanel,
        toggleSignalsPanel,
        toggleFilters,
        handleResize,
        initializeInSequence
    };
}